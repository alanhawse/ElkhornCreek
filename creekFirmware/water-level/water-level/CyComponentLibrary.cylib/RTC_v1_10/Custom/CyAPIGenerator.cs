/*******************************************************************************
* Copyright 2008-2009, Cypress Semiconductor Corporation.  All rights reserved.
* You may use this file only in accordance with the license, terms, conditions, 
* disclaimers, and limitations in the end user license agreement accompanying 
* the software package with which this file was provided.
********************************************************************************/



using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

namespace RTC_v1_10
{
    public partial class CyCustomizer
    {
        #region API Generation
        public void GenerateHFile(ref Dictionary<string, string> paramDict)
        {
            StringWriter writer = new StringWriter();
            string StartOfWeek;
            string DstEnable;
            paramDict.TryGetValue("StartOfWeek", out StartOfWeek);
            paramDict.TryGetValue("DstEnable", out DstEnable);

            int iDstEnable = Convert.ToInt32(DstEnable);
            int iStartOfWeek = Convert.ToInt32(StartOfWeek);

            #region .h File

            writer.WriteLine("/***************************************");
            writer.WriteLine(" *  Paramenters definition");
            writer.WriteLine(" ***************************************/");
            writer.WriteLine("#define " + m_instanceName + "_START_OF_WEEK      	" + StartOfWeek + "");
            writer.WriteLine("#define " + m_instanceName + "_DST_FUNC_ENABLE        " + DstEnable + "");
            writer.WriteLine("");
            writer.WriteLine("/***************************************");
            writer.WriteLine(" *  Types definition");
            writer.WriteLine(" ***************************************/      ");
            writer.WriteLine("typedef struct _" + m_instanceName + "_TimeDate");
            writer.WriteLine("{");
            writer.WriteLine("	uint8 Sec;");
            writer.WriteLine("    uint8 Min;");
            writer.WriteLine("    uint8 Hour;");
            writer.WriteLine("    uint8 DayOfWeek;");
            writer.WriteLine("    uint8 DayOfMonth;");
            writer.WriteLine("    uint16 DayOfYear;");
            writer.WriteLine("    uint8 Month;");
            writer.WriteLine("    uint16 Year;");
            writer.WriteLine("} " + m_instanceName + "_TimeDate;");
            writer.WriteLine("");
            writer.WriteLine("typedef struct _" + m_instanceName + "_Dst");
            writer.WriteLine("{");
            writer.WriteLine("    uint8 Hour;");
            writer.WriteLine("    uint8 DayOfWeek;");
            writer.WriteLine("    uint8 Week;");
            writer.WriteLine("    uint8 DayOfMonth;");
            writer.WriteLine("    uint8 Month;");
            writer.WriteLine("} " + m_instanceName + "_Dst;");
            writer.WriteLine("");
            writer.WriteLine("/***************************************");
            writer.WriteLine(" *  Function Prototypes");
            writer.WriteLine(" ***************************************/");
            writer.WriteLine("CY_ISR_PROTO(" + m_instanceName + "_ISR);");
            writer.WriteLine("");
            writer.WriteLine("void " + m_instanceName + "_Start(void);");
            writer.WriteLine("void " + m_instanceName + "_Stop(void);");
            writer.WriteLine("void " + m_instanceName + "_EnableInt(void);");
            writer.WriteLine("void " + m_instanceName + "_DisableInt(void);");
            writer.WriteLine("");
            writer.WriteLine("void " + m_instanceName + "_ReadTime(" + m_instanceName + "_TimeDate *timedate);	");
            writer.WriteLine("void " + m_instanceName + "_WriteTime(" + m_instanceName + "_TimeDate *timedate);    ");
            writer.WriteLine("");
            writer.WriteLine("/* RTC write functions to set Start Values */");
            writer.WriteLine("void " + m_instanceName + "_WriteSecond(uint8 second);");
            writer.WriteLine("void " + m_instanceName + "_WriteMinute(uint8 minute);");
            writer.WriteLine("void " + m_instanceName + "_WriteHour(uint8 hour);");
            writer.WriteLine("void " + m_instanceName + "_WriteDayOfMonth(uint8 dayofmonth);");
            writer.WriteLine("void " + m_instanceName + "_WriteMonth(uint8 month);");
            writer.WriteLine("void " + m_instanceName + "_WriteYear(uint16 year);");
            writer.WriteLine("");
            writer.WriteLine("/* RTC Alarm write settings */");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmSecond(uint8 second);");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmMinute(uint8 minute);");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmHour(uint8 hour);");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmDayOfMonth(uint8 dayofmonth);");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmMonth(uint8 month);");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmYear(uint16 year);");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmDayOfWeek(uint8 dayofweek);");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmDayOfYear(uint16 dayofyear);");
            writer.WriteLine("");
            writer.WriteLine("/* RTC read settings to set start values */");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadSecond(void);");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadMinute(void);");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadHour(void);");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadDayOfMonth(void);");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadMonth(void);");
            writer.WriteLine("uint16 " + m_instanceName + "_ReadYear(void);");
            writer.WriteLine("");
            writer.WriteLine("/* RTCAlarm read settings */");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmSecond(void);");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmMinute(void);");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmHour(void);");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmDayOfMonth(void);");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmMonth(void);");
            writer.WriteLine("uint16 " + m_instanceName + "_ReadAlarmYear(void);");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmDayOfWeek(void);");
            writer.WriteLine("uint16 " + m_instanceName + "_ReadAlarmDayOfYear(void);");
            writer.WriteLine("");
            writer.WriteLine("/* Set mask interrupt registers */");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmMask(uint8 mask);");
            writer.WriteLine("void " + m_instanceName + "_WriteIntervalMask(uint8 mask);");
            writer.WriteLine("");
            writer.WriteLine("/* Read status register */");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadStatus(void);");
            writer.WriteLine("");
            if (iDstEnable > 0)
            {
                writer.WriteLine("/* DST write settings  */");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTMode(uint8 mode);");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStartHour(uint8 hour);");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStartDayOfMonth(uint8 dayofmonth);");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStartMonth(uint8 month);");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStartDayOfWeek(uint8 dayofweek);");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStartWeek(uint8 week);");
                writer.WriteLine("");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStopHour(uint8 hour);");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStopDayOfMonth(uint8 dayofmonth);");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStopMonth(uint8 month);");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStopDayOfWeek(uint8 dayofweek);");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStopWeek(uint8 week);");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTOffset(uint8 offset);");
            }
            writer.WriteLine("");
            writer.WriteLine("/***************************************");
            writer.WriteLine(" *  Hardware Registers");
            writer.WriteLine(" ***************************************/");
            writer.WriteLine("/* Priority of the " + m_instanceName + "_isr interrupt. */");
            writer.WriteLine("#define " + m_instanceName + "_PRIORITY_NUMBER      " + m_instanceName + "`[isr]`_INTC_PRIOR_NUM");
            writer.WriteLine("");
            writer.WriteLine("/* One pulse per second interrupt registers. */");
            writer.WriteLine("#define " + m_instanceName + "_OPPS_CFG             ( *(reg8 *) CYREG_PM_TW_CFG2 )");
            writer.WriteLine("#define " + m_instanceName + "_OPPS_INT_SR          ( *(reg8 *) CYREG_PM_INT_SR )");
            writer.WriteLine("");
            writer.WriteLine("#define " + m_instanceName + "_OPPS_EN_MASK         0x10u ");
            writer.WriteLine("#define " + m_instanceName + "_OPPSIE_EN_MASK       0x20u");
            writer.WriteLine("");
            writer.WriteLine("");
            writer.WriteLine("/***************************************");
            writer.WriteLine(" *  External Software Registers");
            writer.WriteLine(" ***************************************/");
            writer.WriteLine("extern " + m_instanceName + "_TimeDate " + m_instanceName + "_CurTimeDate;        ");
            writer.WriteLine("extern " + m_instanceName + "_TimeDate " + m_instanceName + "_AlarmTimeDate;     ");
            if (iDstEnable > 0)
            {
                writer.WriteLine("extern uint8    " + m_instanceName + "_DstMode;");
                writer.WriteLine("extern " + m_instanceName + "_Dst  " + m_instanceName + "_DstStartTimeDate;");
                writer.WriteLine("extern " + m_instanceName + "_Dst  " + m_instanceName + "_DstStopTimeDate;  ");
                writer.WriteLine("extern uint8    " + m_instanceName + "_DstOffset;");
                writer.WriteLine("extern uint8	" + m_instanceName + "_DstStatusStart;	");
                writer.WriteLine("extern uint8	" + m_instanceName + "_DstStatusStop;");
            }
            writer.WriteLine("");
            writer.WriteLine("extern uint8   " + m_instanceName + "_AlarmMask;");
            writer.WriteLine("extern uint8   " + m_instanceName + "_AlarmStatus;");
            writer.WriteLine("");
            writer.WriteLine("extern uint8   " + m_instanceName + "_IntervalMask;");
            writer.WriteLine("extern uint8   " + m_instanceName + "_Status;");
            writer.WriteLine("");
            writer.WriteLine("extern const uint8 " + m_instanceName + "_Dim[12];");
            writer.WriteLine("extern const uint8 " + m_instanceName + "_Seq[12];");
            writer.WriteLine("");
            writer.WriteLine("/***************************************");
            writer.WriteLine(" *  Constants");
            writer.WriteLine(" ***************************************/");
            writer.WriteLine("/* Time elapse constants */");
            writer.WriteLine("#define " + m_instanceName + "_MINUTE_ELAPSED             	59");
            writer.WriteLine("#define " + m_instanceName + "_HOUR_ELAPSED             		59");
            writer.WriteLine("#define " + m_instanceName + "_HALF_OF_DAY_ELAPSED            12");
            writer.WriteLine("#define " + m_instanceName + "_DAY_ELAPSED             		23");
            writer.WriteLine("#define " + m_instanceName + "_WEEK_ELAPSED             		7");
            writer.WriteLine("#define " + m_instanceName + "_YEAR_ELAPSED             		12");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_WEEK             		7");
            writer.WriteLine("");
            writer.WriteLine("/* Interval software register bit location */");
            writer.WriteLine("#define " + m_instanceName + "_INTERVAL_SEC_MASK             	0x01u        /* SEC */");
            writer.WriteLine("#define " + m_instanceName + "_INTERVAL_MIN_MASK              0x02u        /* MIN */    ");
            writer.WriteLine("#define " + m_instanceName + "_INTERVAL_HOUR_MASK          	0x04u        /* HOUR*/");
            writer.WriteLine("#define " + m_instanceName + "_INTERVAL_DAY_MASK             	0x08u        /* DOM */");
            writer.WriteLine("#define " + m_instanceName + "_INTERVAL_WEEK_MASK             0x10u        /* DOM */");
            writer.WriteLine("#define " + m_instanceName + "_INTERVAL_MONTH_MASK            0x20u        /* MONTH */");
            writer.WriteLine("#define " + m_instanceName + "_INTERVAL_YEAR_MASK           	0x40u        /* YEAR */  ");
            writer.WriteLine("/* Alarm software register bit location */");
            writer.WriteLine("#define " + m_instanceName + "_ALARM_SEC_MASK                 0x01u        /* SEC */");
            writer.WriteLine("#define " + m_instanceName + "_ALARM_MIN_MASK                 0x02u        /* MIN */    ");
            writer.WriteLine("#define " + m_instanceName + "_ALARM_HOUR_MASK                0x04u        /* HOUR*/");
            writer.WriteLine("#define " + m_instanceName + "_ALARM_DAYOFWEEK_MASK         	0x08u       /* DOW */    ");
            writer.WriteLine("#define " + m_instanceName + "_ALARM_DAYOFMONTH_MASK          0x10u        /* DOM */");
            writer.WriteLine("#define " + m_instanceName + "_ALARM_DAYOFYEAR_MASK           0x20u        /* DOY*/ ");
            writer.WriteLine("#define " + m_instanceName + "_ALARM_MONTH_MASK               0x40u        /* MONTH */");
            writer.WriteLine("#define " + m_instanceName + "_ALARM_YEAR_MASK                0x80u        /* YEAR */ ");
            writer.WriteLine("/* Status software register bit location */");
            writer.WriteLine("#define " + m_instanceName + "_STATUS_DST                     0x01u       /* DST stutus bit */");
            writer.WriteLine("#define " + m_instanceName + "_STATUS_LY                      0x02u       /* Leap Year status bit */");
            writer.WriteLine("#define " + m_instanceName + "_STATUS_AM_PM                   0x04u       /* AM/PM status bit */");
            writer.WriteLine("#define " + m_instanceName + "_STATUS_AA                      0x08u       /* Alarm Active status bit */ ");
            writer.WriteLine("/* Days Of Week definition */");
            if (iStartOfWeek == 0)
            {
                writer.WriteLine("#define " + m_instanceName + "_SUNDAY							1");
                writer.WriteLine("#define " + m_instanceName + "_MONDAY							2");
                writer.WriteLine("#define " + m_instanceName + "_TUESDAY						3");
                writer.WriteLine("#define " + m_instanceName + "_WEDNESDAY						4");
                writer.WriteLine("#define " + m_instanceName + "_THURDAY						5");
                writer.WriteLine("#define " + m_instanceName + "_FRIDAY							6");
                writer.WriteLine("#define " + m_instanceName + "_SATURDAY						7");
            }
            else if (iStartOfWeek == 1)
            {
                writer.WriteLine("#define " + m_instanceName + "_SUNDAY							7");
                writer.WriteLine("#define " + m_instanceName + "_MONDAY							1");
                writer.WriteLine("#define " + m_instanceName + "_TUESDAY						2");
                writer.WriteLine("#define " + m_instanceName + "_WEDNESDAY						3");
                writer.WriteLine("#define " + m_instanceName + "_THURDAY						4");
                writer.WriteLine("#define " + m_instanceName + "_FRIDAY							5");
                writer.WriteLine("#define " + m_instanceName + "_SATURDAY						6");
            }
            else if (iStartOfWeek == 2)
            {
                writer.WriteLine("#define " + m_instanceName + "_SUNDAY							6");
                writer.WriteLine("#define " + m_instanceName + "_MONDAY							7");
                writer.WriteLine("#define " + m_instanceName + "_TUESDAY						1");
                writer.WriteLine("#define " + m_instanceName + "_WEDNESDAY						2");
                writer.WriteLine("#define " + m_instanceName + "_THURDAY						3");
                writer.WriteLine("#define " + m_instanceName + "_FRIDAY							4");
                writer.WriteLine("#define " + m_instanceName + "_SATURDAY						5");
            }
            else if (iStartOfWeek == 3)
            {
                writer.WriteLine("#define " + m_instanceName + "_SUNDAY							5");
                writer.WriteLine("#define " + m_instanceName + "_MONDAY							6");
                writer.WriteLine("#define " + m_instanceName + "_TUESDAY						7");
                writer.WriteLine("#define " + m_instanceName + "_WEDNESDAY						1");
                writer.WriteLine("#define " + m_instanceName + "_THURDAY						2");
                writer.WriteLine("#define " + m_instanceName + "_FRIDAY							3");
                writer.WriteLine("#define " + m_instanceName + "_SATURDAY						4");
            }
            else if (iStartOfWeek == 4)
            {
                writer.WriteLine("#define " + m_instanceName + "_SUNDAY							4");
                writer.WriteLine("#define " + m_instanceName + "_MONDAY							5");
                writer.WriteLine("#define " + m_instanceName + "_TUESDAY						6");
                writer.WriteLine("#define " + m_instanceName + "_WEDNESDAY						7");
                writer.WriteLine("#define " + m_instanceName + "_THURDAY						1");
                writer.WriteLine("#define " + m_instanceName + "_FRIDAY							2");
                writer.WriteLine("#define " + m_instanceName + "_SATURDAY						1");
            }
            else if (iStartOfWeek == 5)
            {
                writer.WriteLine("#define " + m_instanceName + "_SUNDAY							3");
                writer.WriteLine("#define " + m_instanceName + "_MONDAY							4");
                writer.WriteLine("#define " + m_instanceName + "_TUESDAY						5");
                writer.WriteLine("#define " + m_instanceName + "_WEDNESDAY						6");
                writer.WriteLine("#define " + m_instanceName + "_THURDAY						7");
                writer.WriteLine("#define " + m_instanceName + "_FRIDAY							1");
                writer.WriteLine("#define " + m_instanceName + "_SATURDAY						2");
            }
            else if (iStartOfWeek == 6)
            {
                writer.WriteLine("#define " + m_instanceName + "_SUNDAY							2");
                writer.WriteLine("#define " + m_instanceName + "_MONDAY							3");
                writer.WriteLine("#define " + m_instanceName + "_TUESDAY						4");
                writer.WriteLine("#define " + m_instanceName + "_WEDNESDAY						5");
                writer.WriteLine("#define " + m_instanceName + "_THURDAY						6");
                writer.WriteLine("#define " + m_instanceName + "_FRIDAY							7");
                writer.WriteLine("#define " + m_instanceName + "_SATURDAY						1");
            }
            writer.WriteLine("");
            writer.WriteLine("/* Month definition */");
            writer.WriteLine("#define " + m_instanceName + "_JANUARY						1");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_JANUARY				31");
            writer.WriteLine("#define " + m_instanceName + "_FEBRUARY						2		 ");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_FEBRUARY				28");
            writer.WriteLine("#define " + m_instanceName + "_MARCH							3");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_MARCH					31");
            writer.WriteLine("#define " + m_instanceName + "_APRIL							4");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_APRIL					30");
            writer.WriteLine("#define " + m_instanceName + "_MAY							5");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_MAY					31");
            writer.WriteLine("#define " + m_instanceName + "_JUNE							6");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_JUNE					30");
            writer.WriteLine("#define " + m_instanceName + "_JULY							7");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_JULY					31");
            writer.WriteLine("#define " + m_instanceName + "_AUGUST							8");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_AUGUST					31");
            writer.WriteLine("#define " + m_instanceName + "_SEPTEMBER						9");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_SEPTEMBER				30");
            writer.WriteLine("#define " + m_instanceName + "_OCTOBER						10");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_OCTOBER				31");
            writer.WriteLine("#define " + m_instanceName + "_NOVEMBER						11");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_NOVEMBER				30");
            writer.WriteLine("#define " + m_instanceName + "_DECEMBER						12");
            writer.WriteLine("#define " + m_instanceName + "_DAYS_IN_DECEMBER				31");
            writer.WriteLine("/* DTS software registers bit location */");
            writer.WriteLine("#define " + m_instanceName + "_DST_ENABLE						0x01u		/* DST Enable */");
            writer.WriteLine("#define " + m_instanceName + "_DST_FIXDATE					0x00u       /* Fixed data selected  */");
            writer.WriteLine("#define " + m_instanceName + "_DST_RELDATE					0x02u       /* Relative data selected */");
            writer.WriteLine("");
            writer.WriteLine("#define " + m_instanceName + "_DST_HOUR						0x01u		/* DST hour match flag */ ");
            writer.WriteLine("#define " + m_instanceName + "_DST_DAYOFMONTH					0x02u		/* DST day of month match flag*/ ");
            writer.WriteLine("#define " + m_instanceName + "_DST_MONTH						0x04u		/* DST month match flag */ ");
            writer.WriteLine("");

            #endregion
            paramDict.Add("writeHFile", writer.ToString());

            writer = new StringWriter();

            #region .c File
            writer.WriteLine("");
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine("*------------------------    Software Registers  -----------------------------------*");
            writer.WriteLine("*-----------------------------------------------------------------------------------*/");
            writer.WriteLine(m_instanceName + "_TimeDate " + m_instanceName + "_CurTimeDate = {0};         	/* Time and date software registers */");
            writer.WriteLine("");
            writer.WriteLine("/*---------------------------  Alarm Registers  -----------------------------*/");
            writer.WriteLine(m_instanceName + "_TimeDate " + m_instanceName + "_AlarmTimeDate = {0};        /* Alarm time and date software registers */");
            writer.WriteLine("");
            writer.WriteLine("/*--------------------------  DTS Registers  -------------------------------*/");
            if (iDstEnable > 0)
            {
                writer.WriteLine("uint8   " + m_instanceName + "_DstMode = 0;			/* Define DST format: '0' - fixed, '1' - relative */");
                writer.WriteLine(m_instanceName + "_Dst " + m_instanceName + "_DstStartTimeDate = {0};  /* Hour 0-24, DayOfWeek 0-6, Week 1-5, DayOfMonth 1-31, Month 1-12  */");
                writer.WriteLine(m_instanceName + "_Dst " + m_instanceName + "_DstStopTimeDate = {0};     ");
                writer.WriteLine("uint8   " + m_instanceName + "_DstOffset= 0;			/* Number of Hours to add/dec to time */ ");
                writer.WriteLine("uint8   " + m_instanceName + "_DstStatusStart = 0;	");
                writer.WriteLine("uint8   " + m_instanceName + "_DstStatusStop = 0;");
            }
            writer.WriteLine("");
            writer.WriteLine("/*--------------------------  Mask Registers   -----------------------------*/");
            writer.WriteLine("uint8   " + m_instanceName + "_AlarmMask = 0;");
            writer.WriteLine("uint8   " + m_instanceName + "_AlarmStatus = 0;");
            writer.WriteLine("uint8   " + m_instanceName + "_IntervalMask = 0;");
            writer.WriteLine("");
            writer.WriteLine("/*---------------------  Status & Control Registers  --------------------*/");
            writer.WriteLine("uint8   " + m_instanceName + "_Status = 0;");
            writer.WriteLine("");
            writer.WriteLine("/*--------------------- Month Day Array ---------------------------*/");
            writer.WriteLine("const uint8 " + m_instanceName + "_Dim[12] = {");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_JANUARY,");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_FEBRUARY,");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_MARCH,");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_APRIL,");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_MAY,");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_JUNE,");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_JULY,");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_AUGUST,");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_SEPTEMBER,");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_OCTOBER,");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_NOVEMBER,");
            writer.WriteLine("" + m_instanceName + "_DAYS_IN_DECEMBER};");
            writer.WriteLine(" ");
            writer.WriteLine(" const uint8 " + m_instanceName + "_Seq[12] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};");
            writer.WriteLine("");
            writer.WriteLine(" ");

            #region IsLeapYear
            writer.WriteLine("  /*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: uint8 " + m_instanceName + "_IsLeapYear(uint16 year)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary: ");
            writer.WriteLine(" *  This function detemines if year is leap year.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *	(uint16) year: Year value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  (uint8) 1 - Leap Year, 0 - No Leap Year.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_IsLeapYear(uint16 year)");
            writer.WriteLine("{");
            writer.WriteLine("	uint8 lp = 0;");
            writer.WriteLine("	/* A year will be a leap year if it is divisible by 4 but not by 100. ");
            writer.WriteLine("	  If a year is divisible by 4 and by 100, it is not a leap year unless ");
            writer.WriteLine("	  it is also divisible by 400. */");
            writer.WriteLine("	if((!(year % 4)) && (!(year % 100)))");
            writer.WriteLine("	{");
            writer.WriteLine("		/* Divisible by 4 and 100 */");
            writer.WriteLine("		if (!(year % 400))");
            writer.WriteLine("		{	");
            writer.WriteLine("			/* Divisible by 400 */");
            writer.WriteLine("			lp = 0x01;");
            writer.WriteLine("		}");
            writer.WriteLine("	}");
            writer.WriteLine("	else");
            writer.WriteLine("	{");
            writer.WriteLine("		if(!(year % 4) && (year % 100))");
            writer.WriteLine("		{");
            writer.WriteLine("			/* Divisible by 4 but not by 100 */");
            writer.WriteLine("			lp = 0x01;");
            writer.WriteLine("		}");
            writer.WriteLine("	}");
            writer.WriteLine("	");
            writer.WriteLine("	return lp;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region DayOfWeek
            writer.WriteLine(" /*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: uint8 " + m_instanceName + "_DayOfWeek(uint8 dayofmonth, uint8 month, uint16 year)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary: ");
            writer.WriteLine(" *  This function calculate Day Of Week value use Zeller's congruence.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  (uint8) dayofmonth: Day Of Month value;");
            writer.WriteLine(" *	(uint8) month: Month value;");
            writer.WriteLine(" *	(uint16) year: Year value.");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  (uint8) Day Of Week value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_DayOfWeek(uint8 dayofmonth, uint8 month, uint16 year)");
            writer.WriteLine("{");
            writer.WriteLine("	uint8 day;");
            writer.WriteLine("	");
            writer.WriteLine("	/* This is Zeller's congruence for calculations day of week, so all constants put ");
            writer.WriteLine("	accordingly it */");
            writer.WriteLine("	if (month < " + m_instanceName + "_MARCH)");
            writer.WriteLine("		year = year - 1;");
            writer.WriteLine("		");
            writer.WriteLine("	day = (year + year/4 - year/100 + year/400 + " + m_instanceName + "_Seq[month-1] + dayofmonth) % " + m_instanceName + "_DAYS_IN_WEEK;");
            writer.WriteLine("	");
            writer.WriteLine("	return day;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            if (iDstEnable > 0)
            {
                #region DSTDateConversion
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_DSTDateConversion(void)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function convert relative to absolute date.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters: ");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_DSTDateConversion(void)");
                writer.WriteLine("{");
                writer.WriteLine("	uint8 week = 1 ,day = 1, dayofweek;");
                writer.WriteLine("	");
                writer.WriteLine("	/*Start*/");
                writer.WriteLine("	dayofweek = " + m_instanceName + "_DayOfWeek(day, " + m_instanceName + "_DstStartTimeDate.Month, " + m_instanceName + "_CurTimeDate.Year) + 1;");
                writer.WriteLine("	if (dayofweek > " + m_instanceName + "_START_OF_WEEK)");
                writer.WriteLine("	{");
                writer.WriteLine("		dayofweek-= " + m_instanceName + "_START_OF_WEEK;");
                writer.WriteLine("	}");
                writer.WriteLine("	else");
                writer.WriteLine("	{");
                writer.WriteLine("		dayofweek = " + m_instanceName + "_DAYS_IN_WEEK - (" + m_instanceName + "_START_OF_WEEK - dayofweek);");
                writer.WriteLine("	}");
                writer.WriteLine("	");
                writer.WriteLine("	while(dayofweek != " + m_instanceName + "_DstStartTimeDate.DayOfWeek)");
                writer.WriteLine("	{");
                writer.WriteLine("		day++;		");
                writer.WriteLine("		dayofweek++;");
                writer.WriteLine("		if (dayofweek > " + m_instanceName + "_WEEK_ELAPSED)");
                writer.WriteLine("		{");
                writer.WriteLine("			dayofweek = 1;");
                writer.WriteLine("			week++;");
                writer.WriteLine("		}");
                writer.WriteLine("	}");
                writer.WriteLine("");
                writer.WriteLine("	while(week != " + m_instanceName + "_DstStartTimeDate.Week)");
                writer.WriteLine("	{");
                writer.WriteLine("		day += " + m_instanceName + "_DAYS_IN_WEEK;");
                writer.WriteLine("		week++;");
                writer.WriteLine("	}");
                writer.WriteLine("	" + m_instanceName + "_DstStartTimeDate.DayOfMonth = day; ");
                writer.WriteLine("	");
                writer.WriteLine("	/* Stop */");
                writer.WriteLine("	week = 1; day = 1; ");
                writer.WriteLine("	dayofweek = " + m_instanceName + "_DayOfWeek(day, " + m_instanceName + "_DstStopTimeDate.Month, " + m_instanceName + "_CurTimeDate.Year) + 1;");
                writer.WriteLine("	if (dayofweek > " + m_instanceName + "_START_OF_WEEK)");
                writer.WriteLine("	{");
                writer.WriteLine("		dayofweek-= " + m_instanceName + "_START_OF_WEEK;");
                writer.WriteLine("	}");
                writer.WriteLine("	else");
                writer.WriteLine("	{");
                writer.WriteLine("		dayofweek = " + m_instanceName + "_DAYS_IN_WEEK - (" + m_instanceName + "_START_OF_WEEK - dayofweek);");
                writer.WriteLine("	}");
                writer.WriteLine("	");
                writer.WriteLine("	while(dayofweek != " + m_instanceName + "_DstStopTimeDate.DayOfWeek)");
                writer.WriteLine("	{");
                writer.WriteLine("		day++;		");
                writer.WriteLine("		dayofweek++;");
                writer.WriteLine("		if (dayofweek > " + m_instanceName + "_WEEK_ELAPSED)");
                writer.WriteLine("		{");
                writer.WriteLine("			dayofweek = 1;");
                writer.WriteLine("			week++;");
                writer.WriteLine("		}");
                writer.WriteLine("	}");
                writer.WriteLine("");
                writer.WriteLine("	while(week != " + m_instanceName + "_DstStopTimeDate.Week)");
                writer.WriteLine("	{");
                writer.WriteLine("		day += " + m_instanceName + "_DAYS_IN_WEEK;");
                writer.WriteLine("		week++;");
                writer.WriteLine("	}");
                writer.WriteLine("	" + m_instanceName + "_DstStopTimeDate.DayOfMonth = day; ");
                writer.WriteLine("	");
                writer.WriteLine("}");
                #endregion
            }
            writer.WriteLine("");

            #region SetInitValues
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_SetInitValues(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *	This function does all required calculation.");
            writer.WriteLine(" *    - Set LP Year flag;");
            writer.WriteLine(" *    - Set AM/PM flag;");
            writer.WriteLine(" *    - DayOfWeek;");
            writer.WriteLine(" *    - DayOfYear; ");
            writer.WriteLine(" *    - Set DST flag;");
            writer.WriteLine(" *	  - Convert relative to absolute date.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *	None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *	None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_SetInitValues(void)");
            writer.WriteLine("{");
            writer.WriteLine("	uint8 i;");
            writer.WriteLine("	");
            writer.WriteLine("	" + m_instanceName + "_CurTimeDate.DayOfYear = 0;");
            writer.WriteLine("");
            writer.WriteLine("	" + m_instanceName + "_CurTimeDate.DayOfYear += " + m_instanceName + "_CurTimeDate.DayOfMonth;");
            writer.WriteLine("");
            writer.WriteLine("	/* Set LP Year flag */");
            writer.WriteLine("	if(" + m_instanceName + "_IsLeapYear(" + m_instanceName + "_CurTimeDate.Year))	");
            writer.WriteLine("	{			");
            writer.WriteLine("		" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_LY;");
            writer.WriteLine("	}");
            writer.WriteLine("	else");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_LY;");
            writer.WriteLine("	}");
            writer.WriteLine("	");
            writer.WriteLine("    /* DayOfYear */");
            writer.WriteLine("	for(i = 0; i < " + m_instanceName + "_CurTimeDate.Month-1; i++)");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_CurTimeDate.DayOfYear += " + m_instanceName + "_Dim[i];");
            writer.WriteLine("	}");
            writer.WriteLine("	");
            writer.WriteLine("	if(" + m_instanceName + "_Status & " + m_instanceName + "_STATUS_LY)	");
            writer.WriteLine("	{");
            writer.WriteLine("		if (!(" + m_instanceName + "_CurTimeDate.DayOfMonth <= " + m_instanceName + "_DAYS_IN_FEBRUARY+1 && " + m_instanceName + "_CurTimeDate.Month <= " + m_instanceName + "_FEBRUARY ))");
            writer.WriteLine("			" + m_instanceName + "_CurTimeDate.DayOfYear++;");
            writer.WriteLine("	}");
            writer.WriteLine("");
            writer.WriteLine("	/* DayOfWeek */");
            writer.WriteLine("	" + m_instanceName + "_CurTimeDate.DayOfWeek = " + m_instanceName + "_DayOfWeek(" + m_instanceName + "_CurTimeDate.DayOfMonth, " + m_instanceName + "_CurTimeDate.Month, " + m_instanceName + "_CurTimeDate.Year) + 1;");
            writer.WriteLine("	if (" + m_instanceName + "_CurTimeDate.DayOfWeek > " + m_instanceName + "_START_OF_WEEK)");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_CurTimeDate.DayOfWeek -= " + m_instanceName + "_START_OF_WEEK;");
            writer.WriteLine("	}");
            writer.WriteLine("	else");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_CurTimeDate.DayOfWeek = " + m_instanceName + "_DAYS_IN_WEEK - (" + m_instanceName + "_START_OF_WEEK - " + m_instanceName + "_CurTimeDate.DayOfWeek );");
            writer.WriteLine("	}");
            writer.WriteLine("	");
            writer.WriteLine("/* DST flag calculation */");
            if (iDstEnable > 0)
            {
                writer.WriteLine("	if (" + m_instanceName + "_DstMode & " + m_instanceName + "_DST_RELDATE)");
                writer.WriteLine("	{");
                writer.WriteLine("		" + m_instanceName + "_DSTDateConversion();");
                writer.WriteLine("	}	");
                writer.WriteLine("        ");
                writer.WriteLine("    if (" + m_instanceName + "_CurTimeDate.Month > " + m_instanceName + "_DstStartTimeDate.Month)");
                writer.WriteLine("    {");
                writer.WriteLine("        " + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_DST;");
                writer.WriteLine("    }");
                writer.WriteLine("    else if (" + m_instanceName + "_CurTimeDate.Month == " + m_instanceName + "_DstStartTimeDate.Month)");
                writer.WriteLine("    {");
                writer.WriteLine("        if (" + m_instanceName + "_CurTimeDate.DayOfMonth > " + m_instanceName + "_DstStartTimeDate.DayOfMonth)");
                writer.WriteLine("        {");
                writer.WriteLine("            " + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_DST;");
                writer.WriteLine("        }");
                writer.WriteLine("        else if (" + m_instanceName + "_CurTimeDate.DayOfMonth == " + m_instanceName + "_DstStartTimeDate.DayOfMonth)");
                writer.WriteLine("        {");
                writer.WriteLine("            if (" + m_instanceName + "_CurTimeDate.Hour > " + m_instanceName + "_DstStartTimeDate.Hour)");
                writer.WriteLine("            {");
                writer.WriteLine("                " + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_DST;");
                writer.WriteLine("            }");
                writer.WriteLine("        }    ");
                writer.WriteLine("    }");
                writer.WriteLine("        ");
                writer.WriteLine("    if (" + m_instanceName + "_CurTimeDate.Month > " + m_instanceName + "_DstStopTimeDate.Month)");
                writer.WriteLine("    {");
                writer.WriteLine("        " + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_DST;");
                writer.WriteLine("    }");
                writer.WriteLine("    else if (" + m_instanceName + "_CurTimeDate.Month == " + m_instanceName + "_DstStopTimeDate.Month)");
                writer.WriteLine("    {");
                writer.WriteLine("        if (" + m_instanceName + "_CurTimeDate.DayOfMonth > " + m_instanceName + "_DstStopTimeDate.DayOfMonth)");
                writer.WriteLine("        {");
                writer.WriteLine("            " + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_DST;");
                writer.WriteLine("        }");
                writer.WriteLine("        else if (" + m_instanceName + "_CurTimeDate.DayOfMonth == " + m_instanceName + "_DstStopTimeDate.DayOfMonth)");
                writer.WriteLine("        {");
                writer.WriteLine("            if (" + m_instanceName + "_CurTimeDate.Hour > " + m_instanceName + "_DstStopTimeDate.Hour)");
                writer.WriteLine("            {");
                writer.WriteLine("                " + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_DST;");
                writer.WriteLine("            }");
                writer.WriteLine("        }    ");
                writer.WriteLine("    }                            	");
                writer.WriteLine("	");
                writer.WriteLine("   " + m_instanceName + "_DstStatusStart = 0;	");
                writer.WriteLine("   " + m_instanceName + "_DstStatusStop = 0;");
                writer.WriteLine("   ");
                writer.WriteLine("	/* Month */");
                writer.WriteLine("	if(" + m_instanceName + "_DstStopTimeDate.Month == " + m_instanceName + "_CurTimeDate.Month)");
                writer.WriteLine("	{");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStop |= " + m_instanceName + "_DST_MONTH;");
                writer.WriteLine("	}");
                writer.WriteLine("	else");
                writer.WriteLine("	{");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStop &= ~" + m_instanceName + "_DST_MONTH;");
                writer.WriteLine("	}");
                writer.WriteLine("	");
                writer.WriteLine("	if(" + m_instanceName + "_DstStartTimeDate.Month == " + m_instanceName + "_CurTimeDate.Month)");
                writer.WriteLine("	{");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStart |= " + m_instanceName + "_DST_MONTH;");
                writer.WriteLine("	}");
                writer.WriteLine("	else");
                writer.WriteLine("	{");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStart &= ~" + m_instanceName + "_DST_MONTH;");
                writer.WriteLine("	}");
                writer.WriteLine("	");
                writer.WriteLine("	/*DayOfMonth*/");
                writer.WriteLine("	if (" + m_instanceName + "_DstStopTimeDate.DayOfMonth == " + m_instanceName + "_CurTimeDate.DayOfMonth)");
                writer.WriteLine("	{ ");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStop |= " + m_instanceName + "_DST_DAYOFMONTH;");
                writer.WriteLine("	}");
                writer.WriteLine("	else");
                writer.WriteLine("	{");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStop &= ~" + m_instanceName + "_DST_DAYOFMONTH;");
                writer.WriteLine("	}");
                writer.WriteLine("");
                writer.WriteLine("	if (" + m_instanceName + "_DstStartTimeDate.DayOfMonth == " + m_instanceName + "_CurTimeDate.DayOfMonth)");
                writer.WriteLine("	{ ");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStart |= " + m_instanceName + "_DST_DAYOFMONTH;");
                writer.WriteLine("	}");
                writer.WriteLine("	else");
                writer.WriteLine("	{");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStart &= ~" + m_instanceName + "_DST_DAYOFMONTH;");
                writer.WriteLine("	}");
                writer.WriteLine("   ");
                writer.WriteLine("	/* Hour */   ");
                writer.WriteLine("	if (" + m_instanceName + "_DstStopTimeDate.Hour == " + m_instanceName + "_CurTimeDate.Hour)");
                writer.WriteLine("	{");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStop |= " + m_instanceName + "_DST_HOUR;");
                writer.WriteLine("	}");
                writer.WriteLine("	else");
                writer.WriteLine("	{");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStop &= ~" + m_instanceName + "_DST_HOUR;");
                writer.WriteLine("	}");
                writer.WriteLine("	");
                writer.WriteLine("	if (" + m_instanceName + "_DstStartTimeDate.Hour == " + m_instanceName + "_CurTimeDate.Hour)");
                writer.WriteLine("	{");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStart |= " + m_instanceName + "_DST_HOUR;");
                writer.WriteLine("	}");
                writer.WriteLine("	else");
                writer.WriteLine("	{");
                writer.WriteLine("		" + m_instanceName + "_DstStatusStart &= ~" + m_instanceName + "_DST_HOUR;");
                writer.WriteLine("	}");
                writer.WriteLine("    ");
                writer.WriteLine("	/* DST Enable ? */");
                writer.WriteLine("	if (" + m_instanceName + "_DstMode & " + m_instanceName + "_DST_ENABLE)");
                writer.WriteLine("	{");
                writer.WriteLine("		if(" + m_instanceName + "_Status & " + m_instanceName + "_STATUS_DST)");
                writer.WriteLine("		{");
                writer.WriteLine("			if ((" + m_instanceName + "_DstStatusStop & " + m_instanceName + "_DST_HOUR) && (" + m_instanceName + "_DstStatusStop & " + m_instanceName + "_DST_DAYOFMONTH) && (" + m_instanceName + "_DstStatusStop & " + m_instanceName + "_DST_MONTH))");
                writer.WriteLine("			{		");
                writer.WriteLine("				/* Dec Hour and Min */");
                writer.WriteLine("				" + m_instanceName + "_CurTimeDate.Min -= " + m_instanceName + "_DstOffset % (" + m_instanceName + "_HOUR_ELAPSED + 1);");
                writer.WriteLine("				if (" + m_instanceName + "_CurTimeDate.Min > " + m_instanceName + "_HOUR_ELAPSED)");
                writer.WriteLine("				{");
                writer.WriteLine("					/* Adjust Min */");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.Min = " + m_instanceName + "_HOUR_ELAPSED - (~" + m_instanceName + "_CurTimeDate.Min);");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.Hour--;");
                writer.WriteLine("				}");
                writer.WriteLine("			");
                writer.WriteLine("				" + m_instanceName + "_CurTimeDate.Hour -= " + m_instanceName + "_DstOffset / (" + m_instanceName + "_HOUR_ELAPSED + 1);");
                writer.WriteLine("				if (" + m_instanceName + "_CurTimeDate.Hour > " + m_instanceName + "_DAY_ELAPSED)");
                writer.WriteLine("				{");
                writer.WriteLine("					/* Adjust Hour, DEC DOM */");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.Hour = " + m_instanceName + "_DAY_ELAPSED - (~" + m_instanceName + "_CurTimeDate.Hour);");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.DayOfMonth--;");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.DayOfYear--;	");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.DayOfWeek--;");
                writer.WriteLine("            ");
                writer.WriteLine("                    if(" + m_instanceName + "_CurTimeDate.DayOfWeek == 0)");
                writer.WriteLine("                    {");
                writer.WriteLine("                        " + m_instanceName + "_CurTimeDate.DayOfWeek = " + m_instanceName + "_DAYS_IN_WEEK;");
                writer.WriteLine("                    }");
                writer.WriteLine("                    ");
                writer.WriteLine("					if (" + m_instanceName + "_CurTimeDate.DayOfMonth == 0)");
                writer.WriteLine("					{");
                writer.WriteLine("						" + m_instanceName + "_CurTimeDate.Month--;");
                writer.WriteLine("						if(" + m_instanceName + "_CurTimeDate.Month == 0)");
                writer.WriteLine("						{");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.Month = " + m_instanceName + "_DECEMBER;");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.DayOfMonth = " + m_instanceName + "_Dim[" + m_instanceName + "_CurTimeDate.Month-1];");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.Year--;");
                writer.WriteLine("							if(" + m_instanceName + "_IsLeapYear(" + m_instanceName + "_CurTimeDate.Year))  ");
                writer.WriteLine("							{ ");
                writer.WriteLine("								/* LP - true, else - false */");
                writer.WriteLine("								" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_LY;");
                writer.WriteLine("								" + m_instanceName + "_CurTimeDate.DayOfYear = 356;");
                writer.WriteLine("							}");
                writer.WriteLine("							else");
                writer.WriteLine("							{");
                writer.WriteLine("								" + m_instanceName + "_CurTimeDate.DayOfYear = 355;");
                writer.WriteLine("							}");
                writer.WriteLine("						}");
                writer.WriteLine("						else");
                writer.WriteLine("						{");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.DayOfMonth = " + m_instanceName + "_Dim[" + m_instanceName + "_CurTimeDate.Month-1];");
                writer.WriteLine("						}");
                writer.WriteLine("					}");
                writer.WriteLine("				}");
                writer.WriteLine("				" + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_DST;");
                writer.WriteLine("				" + m_instanceName + "_DstStatusStop = 0;			");
                writer.WriteLine("			}");
                writer.WriteLine("		}");
                writer.WriteLine("		else");
                writer.WriteLine("		{");
                writer.WriteLine("			if ((" + m_instanceName + "_DstStatusStart & " + m_instanceName + "_DST_HOUR) && (" + m_instanceName + "_DstStatusStart & " + m_instanceName + "_DST_DAYOFMONTH) && (" + m_instanceName + "_DstStatusStart & " + m_instanceName + "_DST_MONTH))");
                writer.WriteLine("			{");
                writer.WriteLine("				/* Add Hour and Min */");
                writer.WriteLine("				" + m_instanceName + "_CurTimeDate.Min += " + m_instanceName + "_DstOffset % (" + m_instanceName + "_HOUR_ELAPSED + 1);");
                writer.WriteLine("				if (" + m_instanceName + "_CurTimeDate.Min > " + m_instanceName + "_HOUR_ELAPSED)");
                writer.WriteLine("				{");
                writer.WriteLine("					/* Adjust Min */");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.Min -= (" + m_instanceName + "_HOUR_ELAPSED + 1);");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.Hour++;");
                writer.WriteLine("				}");
                writer.WriteLine("			");
                writer.WriteLine("				" + m_instanceName + "_CurTimeDate.Hour += " + m_instanceName + "_DstOffset / (" + m_instanceName + "_HOUR_ELAPSED + 1);");
                writer.WriteLine("				if (" + m_instanceName + "_CurTimeDate.Hour > " + m_instanceName + "_DAY_ELAPSED)");
                writer.WriteLine("				{");
                writer.WriteLine("					/* Adjust hour, add day */");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.Hour -= (" + m_instanceName + "_DAY_ELAPSED + 1);");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.DayOfMonth++;");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.DayOfYear++;");
                writer.WriteLine("					" + m_instanceName + "_CurTimeDate.DayOfWeek++;");
                writer.WriteLine("                     ");
                writer.WriteLine("                    if(" + m_instanceName + "_CurTimeDate.DayOfWeek > " + m_instanceName + "_WEEK_ELAPSED)");
                writer.WriteLine("                    {");
                writer.WriteLine("                        " + m_instanceName + "_CurTimeDate.DayOfWeek = 1;");
                writer.WriteLine("                    }");
                writer.WriteLine("                    ");
                writer.WriteLine("					if (" + m_instanceName + "_CurTimeDate.DayOfMonth > " + m_instanceName + "_Dim[" + m_instanceName + "_CurTimeDate.Month-1])");
                writer.WriteLine("					{");
                writer.WriteLine("						" + m_instanceName + "_CurTimeDate.Month++;");
                writer.WriteLine("						" + m_instanceName + "_CurTimeDate.DayOfMonth = 1;");
                writer.WriteLine("						if(" + m_instanceName + "_CurTimeDate.Month > " + m_instanceName + "_YEAR_ELAPSED)");
                writer.WriteLine("						{");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.Month = " + m_instanceName + "_JANUARY;");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.Year++;");
                writer.WriteLine("							if(" + m_instanceName + "_IsLeapYear(" + m_instanceName + "_CurTimeDate.Year))  ");
                writer.WriteLine("							{ ");
                writer.WriteLine("								/* LP - true, else - false */");
                writer.WriteLine("								" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_LY;");
                writer.WriteLine("							}");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.DayOfYear = 1;");
                writer.WriteLine("						}");
                writer.WriteLine("					}");
                writer.WriteLine("				}");
                writer.WriteLine("				" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_DST;");
                writer.WriteLine("				" + m_instanceName + "_DstStatusStart = 0;	");
                writer.WriteLine("			}");
                writer.WriteLine("		}");
                writer.WriteLine("	}");
            }
            writer.WriteLine("");
            writer.WriteLine("	/* Set AM/PM flag */");
            writer.WriteLine("	if (" + m_instanceName + "_CurTimeDate.Hour < " + m_instanceName + "_HALF_OF_DAY_ELAPSED)");
            writer.WriteLine("	{");
            writer.WriteLine("		/* AM Hour 00:00-11:59, flag zero */");
            writer.WriteLine("		" + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_AM_PM;");
            writer.WriteLine("	}");
            writer.WriteLine("	else");
            writer.WriteLine("	{");
            writer.WriteLine("		/* PM Hour 12:00 - 23:59, flag set */");
            writer.WriteLine("		" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AM_PM;");
            writer.WriteLine("	}");
            writer.WriteLine("    ");
            writer.WriteLine("    /* Alarm calculation */");
            writer.WriteLine("");
            writer.WriteLine("	/* Alarm SEC */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_SEC_MASK)");
            writer.WriteLine("	{");
            writer.WriteLine("		if (" + m_instanceName + "_AlarmTimeDate.Sec == " + m_instanceName + "_CurTimeDate.Sec)");
            writer.WriteLine("		{");
            writer.WriteLine("			" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_SEC_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("        else");
            writer.WriteLine("        {");
            writer.WriteLine("            " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_SEC_MASK;   ");
            writer.WriteLine("        }	");
            writer.WriteLine("	} ");
            writer.WriteLine("");
            writer.WriteLine("	/* Alarm MIN */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_MIN_MASK)");
            writer.WriteLine("	{");
            writer.WriteLine("		if (" + m_instanceName + "_AlarmTimeDate.Min == " + m_instanceName + "_CurTimeDate.Min)");
            writer.WriteLine("		{");
            writer.WriteLine("			" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_MIN_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("        else");
            writer.WriteLine("        {");
            writer.WriteLine("            " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_MIN_MASK;");
            writer.WriteLine("        }");
            writer.WriteLine("	}");
            writer.WriteLine("");
            writer.WriteLine("		/* Alarm HOUR */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_HOUR_MASK)");
            writer.WriteLine("	{");
            writer.WriteLine("		if (" + m_instanceName + "_AlarmTimeDate.Hour == " + m_instanceName + "_CurTimeDate.Hour)");
            writer.WriteLine("		{");
            writer.WriteLine("			" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_HOUR_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("        else");
            writer.WriteLine("        {");
            writer.WriteLine("            " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_HOUR_MASK;");
            writer.WriteLine("        }");
            writer.WriteLine("	}");
            writer.WriteLine("");
            writer.WriteLine("	/* Alarm DAYOFWEEK */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_DAYOFWEEK_MASK)");
            writer.WriteLine("	{");
            writer.WriteLine("		if(" + m_instanceName + "_AlarmTimeDate.DayOfWeek == " + m_instanceName + "_CurTimeDate.DayOfWeek)");
            writer.WriteLine("		{");
            writer.WriteLine("          	" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFWEEK_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("		else");
            writer.WriteLine("		{");
            writer.WriteLine("          	" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFWEEK_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("	}");
            writer.WriteLine("");
            writer.WriteLine("	/* Alarm DAYOFYEAR */");
            writer.WriteLine("	if( " + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_DAYOFYEAR_MASK )");
            writer.WriteLine("	{										");
            writer.WriteLine("		if(" + m_instanceName + "_AlarmTimeDate.DayOfYear == " + m_instanceName + "_CurTimeDate.DayOfYear)");
            writer.WriteLine("		{");
            writer.WriteLine("			" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFYEAR_MASK;  ");
            writer.WriteLine("		}");
            writer.WriteLine("		else");
            writer.WriteLine("		{");
            writer.WriteLine("          	" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFYEAR_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("	}");
            writer.WriteLine("	");
            writer.WriteLine("	/* Alarm DAYOFMONTH */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_DAYOFMONTH_MASK )  ");
            writer.WriteLine("	{");
            writer.WriteLine("		if (" + m_instanceName + "_AlarmTimeDate.DayOfMonth == " + m_instanceName + "_CurTimeDate.DayOfMonth)");
            writer.WriteLine("		{ ");
            writer.WriteLine("          	" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFMONTH_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("       	else");
            writer.WriteLine("		{");
            writer.WriteLine("          	" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFMONTH_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("	}");
            writer.WriteLine("");
            writer.WriteLine("	/* Alarm MONTH */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_MONTH_MASK )");
            writer.WriteLine("	{");
            writer.WriteLine("		if(" + m_instanceName + "_AlarmTimeDate.Month == " + m_instanceName + "_CurTimeDate.Month)");
            writer.WriteLine("		{");
            writer.WriteLine("			" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_MONTH_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("		else");
            writer.WriteLine("		{");
            writer.WriteLine("			" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_MONTH_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("	} ");
            writer.WriteLine("");
            writer.WriteLine("	/* Alarm YEAR */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_YEAR_MASK)");
            writer.WriteLine("	{");
            writer.WriteLine("		if(" + m_instanceName + "_AlarmTimeDate.Year == " + m_instanceName + "_CurTimeDate.Year)");
            writer.WriteLine("		{");
            writer.WriteLine("			" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_YEAR_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("		else");
            writer.WriteLine("		{");
            writer.WriteLine("			" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_YEAR_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("	}");
            writer.WriteLine("");
            writer.WriteLine("	 /* Set Alarm flag event */");
            writer.WriteLine("	if ((" + m_instanceName + "_AlarmMask == " + "(" + m_instanceName + "_AlarmMask & " + m_instanceName + "_AlarmStatus)) && " + m_instanceName + "_AlarmMask )");
            writer.WriteLine("	{");
            writer.WriteLine(" 		" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AA;");
            writer.WriteLine("		" + m_instanceName + "_AlarmStatus = 0;");
            writer.WriteLine("	} ");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region Start
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_Start(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function enables  RTC component to opearation: configurate counter, ");
            writer.WriteLine(" *  setup interrupts, done all requered calculation and starts counter.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:  ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:     ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" * ");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_Start(void) ");
            writer.WriteLine("{");
            writer.WriteLine("	");
            writer.WriteLine("	/* Start calculation of required date and flags */");
            writer.WriteLine("	" + m_instanceName + "_SetInitValues();");
            writer.WriteLine("	");
            writer.WriteLine("    /* For all we know the interrupt is active. */");
            writer.WriteLine("    " + m_instanceName + "_isr_Disable();");
            writer.WriteLine("");
            writer.WriteLine("    /* Set the ISR to point to the RTC_SUT_isr Interrupt. */");
            writer.WriteLine("    " + m_instanceName + "_isr_SetVector(" + m_instanceName + "_ISR);");
            writer.WriteLine("");
            writer.WriteLine("    /* Set the priority. */");
            writer.WriteLine("    " + m_instanceName + "_isr_SetPriority(" + m_instanceName + "_PRIORITY_NUMBER);");
            writer.WriteLine("");
            writer.WriteLine("    /* Enable it. */");
            writer.WriteLine("    " + m_instanceName + "_isr_Enable();");
            writer.WriteLine("    ");
            writer.WriteLine("    /* Start one pulse per second interrupt. */");
            writer.WriteLine("    " + m_instanceName + "_OPPS_CFG |= " + m_instanceName + "_OPPS_EN_MASK;");
            writer.WriteLine("    " + m_instanceName + "_OPPS_CFG |= " + m_instanceName + "_OPPSIE_EN_MASK;    ");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region Stop
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_Stop( void )");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function, stops RTC Component operation.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:  ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:     ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" * ");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *   None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_Stop(void)");
            writer.WriteLine("{");
            writer.WriteLine("    /* Disable the " + m_instanceName + " interrupt. */");
            writer.WriteLine("    " + m_instanceName + "_isr_Disable();");
            writer.WriteLine("	");
            writer.WriteLine("	/* Stop one pulse per second interrupt. */");
            writer.WriteLine("    " + m_instanceName + "_OPPS_CFG &= ~" + m_instanceName + "_OPPS_EN_MASK;");
            writer.WriteLine("    " + m_instanceName + "_OPPS_CFG &= ~" + m_instanceName + "_OPPSIE_EN_MASK;  	");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region EnableInt
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_EnableInt(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This fucntion enables interrupts of RTC Component.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:    ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *   None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_EnableInt(void)");
            writer.WriteLine("{");
            writer.WriteLine("    /* Enable the " + m_instanceName + " interrupt */");
            writer.WriteLine("	" + m_instanceName + "_isr_Enable();");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region DisableInt
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_DisableInt(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function disables interrupts of RTC Component, time and date stop running.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:    ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *   None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_DisableInt(void)");
            writer.WriteLine("{");
            writer.WriteLine("    /* Disable the " + m_instanceName + " interrupt. */");
            writer.WriteLine("    " + m_instanceName + "_isr_Disable(); ");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadTime
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_ReadTime(" + m_instanceName + "_TimeDate *timedate) ");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This funciton reads current time and date.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  (" + m_instanceName + "_TimeDate *) timedate: Pointer to stuct where curent time and date copy.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:    ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  Disable interrupt of RTC Component when read to avoid RTC Counter increament in ");
            writer.WriteLine(" *  the middle of time and date reading. After reading interrupt from RTC Component enables.");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_ReadTime(" + m_instanceName + "_TimeDate *timedate)");
            writer.WriteLine("{");
            writer.WriteLine(" 	/* Disable Interrupt of RTC Component */ ");
            writer.WriteLine("  	" + m_instanceName + "_DisableInt();");
            writer.WriteLine("   ");
            writer.WriteLine("	/* Read current time and date */");
            writer.WriteLine("    timedate->Sec = " + m_instanceName + "_CurTimeDate.Sec ;");
            writer.WriteLine("    timedate->Min = " + m_instanceName + "_CurTimeDate.Min;");
            writer.WriteLine("    timedate->Hour = " + m_instanceName + "_CurTimeDate.Hour;");
            writer.WriteLine("    timedate->DayOfWeek =" + m_instanceName + "_CurTimeDate.DayOfWeek;");
            writer.WriteLine("    timedate->DayOfMonth = " + m_instanceName + "_CurTimeDate.DayOfMonth;");
            writer.WriteLine("    timedate->DayOfYear = " + m_instanceName + "_CurTimeDate.DayOfYear;");
            writer.WriteLine("    timedate->Month = " + m_instanceName + "_CurTimeDate.Month;");
            writer.WriteLine("	timedate->Year = " + m_instanceName + "_CurTimeDate.Year;");
            writer.WriteLine("");
            writer.WriteLine("  	/* Enable Interrupt of RTC Component */ ");
            writer.WriteLine("  	" + m_instanceName + "_EnableInt();");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteTime
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteTime(" + m_instanceName + "_TimeDate *timedate)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes time and date values as current time and date. Only ");
            writer.WriteLine(" *  passes Milliseconds(optionaly), Seconds, Minutes, Hours, Month, ");
            writer.WriteLine(" *  Day Of Month and Year.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  (" + m_instanceName + "_TimeDate *) timedate: Pointer to stuct of time and date values.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:    ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteTime(" + m_instanceName + "_TimeDate *timedate)");
            writer.WriteLine("{");
            writer.WriteLine("    /* Disable Interrupt of RTC Component */ ");
            writer.WriteLine("	" + m_instanceName + "_DisableInt();");
            writer.WriteLine("	");
            writer.WriteLine("	/* Write current time and date */");
            writer.WriteLine("    " + m_instanceName + "_CurTimeDate.Sec = timedate->Sec ;");
            writer.WriteLine("    " + m_instanceName + "_CurTimeDate.Min = timedate->Min ;");
            writer.WriteLine("    " + m_instanceName + "_CurTimeDate.Hour = timedate->Hour ;");
            writer.WriteLine("    " + m_instanceName + "_CurTimeDate.DayOfMonth = timedate->DayOfMonth ;");
            writer.WriteLine("	" + m_instanceName + "_CurTimeDate.Month = timedate->Month;");
            writer.WriteLine("    " + m_instanceName + "_CurTimeDate.Year = timedate->Year;");
            writer.WriteLine("  	");
            writer.WriteLine("	/* Enable Interrupt of RTC Component */ ");
            writer.WriteLine("  	" + m_instanceName + "_EnableInt();");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteSecond
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteSecond(uint8 second)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes Sec software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  (uint8) second: Seconds value. ");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:    ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteSecond(uint8 second)");
            writer.WriteLine("{");
            writer.WriteLine("  " + m_instanceName + "_CurTimeDate.Sec = second;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteMinute
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   void " + m_instanceName + "_WriteMinute(uint8 minute)");
            writer.WriteLine(" *------------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  Write Minute value in minutes counter register.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" * (uint8) minute: Minutes value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:    ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteMinute(uint8 minute)");
            writer.WriteLine("{");
            writer.WriteLine("     " + m_instanceName + "_CurTimeDate.Min = minute;   ");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteHour
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteHour(uint8 hour)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes Hour software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  (uint8) hour: Hours value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:    ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteHour(uint8 hour)");
            writer.WriteLine("{    ");
            writer.WriteLine("     " + m_instanceName + "_CurTimeDate.Hour = hour; ");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteDayOfMonth
            writer.WriteLine(" /*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDayOfMonth(uint8 dayofmonth)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes DayOfMonth software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  (uint8) dayofmonth: Day Of Month value");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:    ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteDayOfMonth(uint8 dayofmonth)");
            writer.WriteLine("{");
            writer.WriteLine("    " + m_instanceName + "_CurTimeDate.DayOfMonth = dayofmonth;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteMonth
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteMonth(uint8 month)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes Month software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  (uint8) month: Month value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *   None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteMonth(uint8 month)");
            writer.WriteLine("{");
            writer.WriteLine("    " + m_instanceName + "_CurTimeDate.Month = month;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteYear
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteYear(uint16 year)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *   This function writes Year software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  (uint16) year: Years value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *   None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteYear(uint16 year)");
            writer.WriteLine("{");
            writer.WriteLine("    " + m_instanceName + "_CurTimeDate.Year = year;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteAlarmSecond
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteAlarmSecond(uint8 second)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes Alarm Sec software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  (uint8) second: Alarm Seconds value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return: ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmSecond(uint8 second)");
            writer.WriteLine("{");
            writer.WriteLine("    " + m_instanceName + "_AlarmTimeDate.Sec = second;");
            
            writer.WriteLine("  ");                        
            writer.WriteLine("	/* Alarm SEC */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmTimeDate.Sec == " + m_instanceName + "_CurTimeDate.Sec)");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_SEC_MASK;");
            writer.WriteLine("	}");
            writer.WriteLine("  else");
            writer.WriteLine("  {");
            writer.WriteLine("      " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_SEC_MASK;   ");
            writer.WriteLine("  }	");
                                                
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteAlarmMinute
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteAlarmMinute(uint8 minute);");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes Alarm Min software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  (uint8) minute: Alarm Minutes value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *  None ");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmMinute(uint8 minute)");
            writer.WriteLine("{");
            writer.WriteLine("    " + m_instanceName + "_AlarmTimeDate.Min = minute;");
            
            writer.WriteLine("  ");
            writer.WriteLine("	/* Alarm MIN */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmTimeDate.Min == " + m_instanceName + "_CurTimeDate.Min)");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_MIN_MASK;");
            writer.WriteLine("	}");
            writer.WriteLine("  else");
            writer.WriteLine("  {");
            writer.WriteLine("      " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_MIN_MASK;   ");
            writer.WriteLine("  }	");
            
            
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteAlarmHour
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteAlarmHour(uint8 hour)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes Alarm Hour software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  (uint8) hour: Alarm Hours value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" * ");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmHour(uint8 hour)");
            writer.WriteLine("{");
            writer.WriteLine("    " + m_instanceName + "_AlarmTimeDate.Hour = hour; ");

            writer.WriteLine("  ");                        
            writer.WriteLine("	/* Alarm HOUR */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmTimeDate.Hour == " + m_instanceName + "_CurTimeDate.Hour)");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_HOUR_MASK;");
            writer.WriteLine("	}");
            writer.WriteLine("  else");
            writer.WriteLine("  {");
            writer.WriteLine("      " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_HOUR_MASK;   ");
            writer.WriteLine("  }	");
            
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteAlarmDayOfMonth
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   void " + m_instanceName + "_WriteAlarmDayOfMonth(uint8 dayofmonth)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes Alarm DayOfMonth software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  (uint8) dayofmonth: Alarm Day Of Month value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmDayOfMonth(uint8 dayofmonth)");
            writer.WriteLine("{");
            writer.WriteLine("    " + m_instanceName + "_AlarmTimeDate.DayOfMonth = dayofmonth; ");

            writer.WriteLine("  ");                        
            writer.WriteLine("	/* Alarm DAYOFMONTH */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmTimeDate.DayOfMonth == " + m_instanceName + "_CurTimeDate.DayOfMonth)");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFMONTH_MASK;");
            writer.WriteLine("	}");
            writer.WriteLine("  else");
            writer.WriteLine("  {");
            writer.WriteLine("      " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFMONTH_MASK;   ");
            writer.WriteLine("  }	");            
            
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteAlarmMonth
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteAlarmMonth(uint8 month)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes Alarm Month software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  (uint8) month: Alarm Months value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmMonth(uint8 month)");
            writer.WriteLine("{");
            writer.WriteLine("    " + m_instanceName + "_AlarmTimeDate.Month = month; ");

            writer.WriteLine("  ");
            writer.WriteLine("	/* Alarm MONTH */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmTimeDate.Month == " + m_instanceName + "_CurTimeDate.Month)");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_MONTH_MASK;");
            writer.WriteLine("	}");
            writer.WriteLine("  else");
            writer.WriteLine("  {");
            writer.WriteLine("      " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_MONTH_MASK;   ");
            writer.WriteLine("  }	");
            
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteAlarmYear
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteAlarmYear(uint16 year)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes Alarm Year software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: None");
            writer.WriteLine(" *  (uint16) year: Alarm  Years value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return: ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmYear(uint16 year)");
            writer.WriteLine("{");
            writer.WriteLine("   " + m_instanceName + "_AlarmTimeDate.Year = year;");
            
            writer.WriteLine("  ");
            writer.WriteLine("	/* Alarm YEAR */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmTimeDate.Year == " + m_instanceName + "_CurTimeDate.Year)");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_YEAR_MASK;");
            writer.WriteLine("	}");
            writer.WriteLine("  else");
            writer.WriteLine("  {");
            writer.WriteLine("      " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_YEAR_MASK;   ");
            writer.WriteLine("  }	");
            
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteAlarmDayOfWeek
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteAlarmDayOfWeek(uint8 dayofweek)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *   This function writes Alarm DayOfWeek software register value. ");
            writer.WriteLine(" *   Days values { Sun = 1, Mon = 2, Tue = 3, Wen = 4, Thu = 5, Fri = 6, Sut = 7 }");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  (uint8) dayofweek: Alarm Day Of Week value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *  None ");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmDayOfWeek(uint8 dayofweek)");
            writer.WriteLine("{");
            writer.WriteLine("    " + m_instanceName + "_AlarmTimeDate.DayOfWeek = dayofweek;");
            
            writer.WriteLine("  ");
            writer.WriteLine("	/* Alarm DAYOFWEEK */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmTimeDate.DayOfWeek == " + m_instanceName + "_CurTimeDate.DayOfWeek)");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFWEEK_MASK;");
            writer.WriteLine("	}");
            writer.WriteLine("  else");
            writer.WriteLine("  {");
            writer.WriteLine("      " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFWEEK_MASK;   ");
            writer.WriteLine("  }	");
            
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteAlarmDayOfYear
            writer.WriteLine(" /*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteAlarmDayOfYear(uint16 dayofyear)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes Alarm DayOfYear software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  (uint16) dayofyear: Alarm Day Of Year value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmDayOfYear(uint16 dayofyear)");
            writer.WriteLine("{");
            writer.WriteLine("  " + m_instanceName + "_AlarmTimeDate.DayOfYear = dayofyear;");

            writer.WriteLine("  ");
            writer.WriteLine("	/* Alarm DAYOFYEAR */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmTimeDate.DayOfYear == " + m_instanceName + "_CurTimeDate.DayOfYear)");
            writer.WriteLine("	{");
            writer.WriteLine("		" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFYEAR_MASK;");
            writer.WriteLine("	}");
            writer.WriteLine("  else");
            writer.WriteLine("  {");
            writer.WriteLine("      " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFYEAR_MASK;   ");
            writer.WriteLine("  }	");
                                    
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadSecond
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint8 " + m_instanceName + "_ReadSecond(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Sec software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  (uint8) Seconds current value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *   None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadSecond(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_CurTimeDate.Sec;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadMinute
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint8 " + m_instanceName + "_ReadMinute(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Min software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *  (uint8) Minutes current value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadMinute(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_CurTimeDate.Min;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadHour
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint8 " + m_instanceName + "_ReadHour(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Hour software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *  (uint8) Hours current value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadHour(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_CurTimeDate.Hour;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadDayOfMonth
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint8 " + m_instanceName + "_ReadDayOfMonth(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads DayOfMonth software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *  (uint8) Day Of Month current value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadDayOfMonth(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_CurTimeDate.DayOfMonth;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadMonth
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint8 " + m_instanceName + "_ReadMonth(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Month software register value. ");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *   None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  (uint8) Months current value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *   None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadMonth(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_CurTimeDate.Month; ");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadYear
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:  uint16 " + m_instanceName + "_ReadYear(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Year software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: None");
            writer.WriteLine(" *   None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  (uint16) Years current value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *   None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint16 " + m_instanceName + "_ReadYear(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_CurTimeDate.Year;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadAlarmSecond
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint8 " + m_instanceName + "_ReadAlarmSecond(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Alarm Sec software register value. ");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *  (uint8) Alarm Sec software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmSecond(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_AlarmTimeDate.Sec;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadAlarmMinute
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint8 " + m_instanceName + "_ReadAlarmMinute(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Alarm Min software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return: ");
            writer.WriteLine(" *  (uint8) Alarm Min software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmMinute(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_AlarmTimeDate.Min;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadAlarmHour
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint8 " + m_instanceName + "_ReadAlarmHour(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Alarm Hour software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *  (uint8) Alarm Hour software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmHour(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_AlarmTimeDate.Hour;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadAlarmDayOfMonth
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint8 " + m_instanceName + "_ReadAlarmDayOfMonth(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Alarm DayOfMonth software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  (uint8) Alarm DayOfMonth software register value.");
            writer.WriteLine(" * ");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmDayOfMonth(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_AlarmTimeDate.DayOfMonth;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadAlarmMonth
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint8 " + m_instanceName + "_ReadAlarmMonth(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Alarm Month software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  (uint8) Alarm Month software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmMonth(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_AlarmTimeDate.Month;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadAlarmYear
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint16 " + m_instanceName + "_ReadAlarmYear(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Alarm Year software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *  (uint8) Alarm Year software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint16 " + m_instanceName + "_ReadAlarmYear(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_AlarmTimeDate.Year;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadAlarmDayOfWeek
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   uint8 " + m_instanceName + "_ReadAlarmDayOfWeek(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Alarm DayOfWeek software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  (uint8) Alarm DayOfWeek software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadAlarmDayOfWeek(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return " + m_instanceName + "_AlarmTimeDate.DayOfWeek;  ");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadAlarmDayOfYear
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:  uint16 " + m_instanceName + "_ReadAlarmDayOfYear(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads Alarm DayOfYear software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:");
            writer.WriteLine(" *  (uint16) Alarm DayOfYear software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint16 " + m_instanceName + "_ReadAlarmDayOfYear(void)");
            writer.WriteLine("{");
            writer.WriteLine("    return  " + m_instanceName + "_AlarmTimeDate.DayOfYear;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteAlarmMask
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteAlarmMask(uint8 mask)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function writes the Alarm Mask software register with 1 bit per ");
            writer.WriteLine(" *  time/date entry. Alarm true when all masked time/date values match ");
            writer.WriteLine(" *  Alarm values. ");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  (uint8) mask: Alarm Mask software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteAlarmMask(uint8 mask)");
            writer.WriteLine("{");
            writer.WriteLine("    " + m_instanceName + "_AlarmMask = mask;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region WriteIntervalMask
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteIntervalMask(uint8 mask)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  Writes the Interval Mask software register with 1 bit per time/date entry. ");
            writer.WriteLine(" *  Interrupt true when any masked time/date overflow occur. ");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters:");
            writer.WriteLine(" *  (uint8) mask: Interval Mask software register value.");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return: ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("void " + m_instanceName + "_WriteIntervalMask(uint8 mask)");
            writer.WriteLine("{");
            writer.WriteLine("    " + m_instanceName + "_IntervalMask = mask;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            #region ReadStatus
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME: uint8 " + m_instanceName + "_ReadStatus(void)");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This function reads the Status software register which has flags for DST (DST), ");
            writer.WriteLine(" *  Leap Year (LY) and AM/PM (AM_PM), Alarm active (AA).");
            writer.WriteLine(" *");
            writer.WriteLine(" * Parameters: ");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return:  ");
            writer.WriteLine(" *  (uint8) Status software register value. ");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("uint8 " + m_instanceName + "_ReadStatus(void)");
            writer.WriteLine("{");
            writer.WriteLine("    uint8 status = 0;");
            writer.WriteLine("    ");
            writer.WriteLine("    status = (uint8)" + m_instanceName + "_Status;");
            writer.WriteLine("  	" + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_AA;  /* Clean AA flag after read of Status Register */");
            writer.WriteLine("	");
            writer.WriteLine("	return status;");
            writer.WriteLine("}");
            writer.WriteLine("");
            #endregion
            if (iDstEnable > 0)
            {
                #region WriteDSTMode
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDSTMode(uint8 mode)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST mode software register. That enables or disables DST changes and ");
                writer.WriteLine(" *  sets the date mode to fixed date or relative date. Only generated if DST enabled.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters: ");
                writer.WriteLine(" *  (uint8) mode: DST Mode software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTMode(uint8 mode)");
                writer.WriteLine("{");
                writer.WriteLine("  " + m_instanceName + "_DstMode = mode;");
                writer.WriteLine("}");
                writer.WriteLine("");
                #endregion
                #region WriteDSTStartHour
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDSTStartHour(uint8 hour)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST Start Hour software register. ");
                writer.WriteLine(" *  Used for absolute date entry. Only generated if DST enabled. ");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters: ");
                writer.WriteLine(" *  (uint8) hour: DST Start Hour software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStartHour(uint8 hour)");
                writer.WriteLine("{");
                writer.WriteLine("  " + m_instanceName + "_DstStartTimeDate.Hour = hour;");
                writer.WriteLine("}");
                writer.WriteLine("");
                #endregion
                #region WriteDSTStartOfMonth
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDSTStartOfMonth(uint8 dayofmonth)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST Start DayOfMonth software register. Used for ");
                writer.WriteLine(" *  absolute date entry. Only generated if DST enabled.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters: ");
                writer.WriteLine(" *  (uint8) dayofmonth: DST Start DayOfMonth software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:  ");
                writer.WriteLine(" *  None ");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStartDayOfMonth(uint8 dayofmonth)");
                writer.WriteLine("{");
                writer.WriteLine("    " + m_instanceName + "_DstStartTimeDate.DayOfMonth = dayofmonth;");
                writer.WriteLine("}");
                writer.WriteLine("");
                #endregion
                #region WriteDSTStartMonth
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDSTStartMonth(uint8 month)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST Start Month software register. Used for ");
                writer.WriteLine(" *  absolute date entry. Only generated if DST enabled.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters: None");
                writer.WriteLine(" *  (uint8) month: DST Start Month software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStartMonth(uint8 month)");
                writer.WriteLine("{");
                writer.WriteLine("    " + m_instanceName + "_DstStartTimeDate.Month = month;");
                writer.WriteLine("}");
                writer.WriteLine("");
                #endregion
                #region WriteDSTStartDayOfWeek
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDSTStartDayOfWeek(uint8 dayofweek)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST Start DayOfWeek software register. Used for ");
                writer.WriteLine(" *  absolute date entry. Only generated if DST enabled.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters:");
                writer.WriteLine(" *  (uint8) dayofweek: DST Start DayOfWeek software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStartDayOfWeek(uint8 dayofweek)");
                writer.WriteLine("{");
                writer.WriteLine("    " + m_instanceName + "_DstStartTimeDate.DayOfWeek = dayofweek;");
                writer.WriteLine("}");
                writer.WriteLine("");
                #endregion
                #region WriteDSTStartWeek
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME:   void " + m_instanceName + "_WriteDSTStartWeek(uint8 Week)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST Start Week software register. Used for ");
                writer.WriteLine(" *  absolute date entry. Only generated if DST enabled.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters:");
                writer.WriteLine(" *  (uint8) DST Start Week software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:  ");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStartWeek(uint8 Week)");
                writer.WriteLine("{");
                writer.WriteLine("    " + m_instanceName + "_DstStartTimeDate.Week = Week;");
                writer.WriteLine("}");
                writer.WriteLine("");
                #endregion
                #region WriteDSTStopHour
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDSTStopHour(uint8 hour)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST Stop Hour software register. Used for ");
                writer.WriteLine(" *  absolute date entry. Only generated if DST enabled. ");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters:");
                writer.WriteLine(" *  (uint8) hour: DST Stop Hour software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStopHour(uint8 hour)");
                writer.WriteLine("{");
                writer.WriteLine("  " + m_instanceName + "_DstStopTimeDate.Hour = hour;");
                writer.WriteLine("}");
                writer.WriteLine("");
                #endregion
                #region WriteDSTStopDayOfMonth
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDSTStopDayOfMonth(uint8 dayofmonth)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST Stop DayOfMonth software register. Used for ");
                writer.WriteLine(" *  absolute date entry. Only generated if DST enabled.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters:");
                writer.WriteLine(" *  (uint8) dayofmonth: DST Stop DayOfMonth software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStopDayOfMonth(uint8 dayofmonth)");
                writer.WriteLine("{");
                writer.WriteLine("  " + m_instanceName + "_DstStopTimeDate.DayOfMonth = dayofmonth;");
                writer.WriteLine("}");
                writer.WriteLine("");
                #endregion
                #region WriteDSTStopMonth
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDSTStopMonth(uint8 month)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST Stop Month software  register. Used for ");
                writer.WriteLine(" *  absolute date entry. Only generated if DST enabled.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters:");
                writer.WriteLine(" *  (uint8) month: DST Stop Month software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:  ");
                writer.WriteLine(" *  None ");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStopMonth(uint8 month)");
                writer.WriteLine("{");
                writer.WriteLine("  " + m_instanceName + "_DstStopTimeDate.Month = month;");
                writer.WriteLine("}");
                writer.WriteLine("");
                #endregion
                #region WriteDSTStopDayOfWeek
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDSTStopDayOfWeek(uint8 dayofweek)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST Stop DayOfWeek software register. Used for ");
                writer.WriteLine(" *  relative date entry. Only generated if DST enabled.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters:");
                writer.WriteLine(" *  (uint8) dayofweek: DST Stop DayOfWeek software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStopDayOfWeek(uint8 dayofweek)");
                writer.WriteLine("{");
                writer.WriteLine("  " + m_instanceName + "_DstStopTimeDate.DayOfWeek = dayofweek;");
                writer.WriteLine("}");
                writer.WriteLine("");
                #endregion
                #region WriteDSTStopWeek
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDSTStopWeek(uint8 week)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST Stop Week software register. Used for ");
                writer.WriteLine(" *  relative date entry. Only generated if DST enabled.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters:");
                writer.WriteLine(" *  (uint8) week: DST Stop Week software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:  ");
                writer.WriteLine(" *  None ");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTStopWeek(uint8 week)");
                writer.WriteLine("{");
                writer.WriteLine("  " + m_instanceName + "_DstStopTimeDate.Week = week;");
                writer.WriteLine("}");
                writer.WriteLine("");
                #endregion
                #region WriteDSTOffset
                writer.WriteLine("/*-----------------------------------------------------------------------------");
                writer.WriteLine(" * FUNCTION NAME: void " + m_instanceName + "_WriteDSTOffset(uint8 offset)");
                writer.WriteLine(" *-----------------------------------------------------------------------------");
                writer.WriteLine(" * Summary:");
                writer.WriteLine(" *  This function writes the DST Offset register. Allows a configurable increment");
                writer.WriteLine(" *  or decrement of time between 0 and 255 minutes. Increment occures on DST Start ");
                writer.WriteLine(" *  and decrement on DST Stop. Only generated if DST enabled. ");
                writer.WriteLine(" *");
                writer.WriteLine(" * Parameters: ");
                writer.WriteLine(" *  (uint8) offset: DST Offset software register value.");
                writer.WriteLine(" *");
                writer.WriteLine(" * Return:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" * Theory:");
                writer.WriteLine(" *  See summary");
                writer.WriteLine(" *");
                writer.WriteLine(" * Side Effects:");
                writer.WriteLine(" *  None");
                writer.WriteLine(" *");
                writer.WriteLine(" *---------------------------------------------------------------------------*/");
                writer.WriteLine("void " + m_instanceName + "_WriteDSTOffset(uint8 offset)");
                writer.WriteLine("{");
                writer.WriteLine("    " + m_instanceName + "_DstOffset = offset;");
                writer.WriteLine("}");
                #endregion
            }

            #endregion
            paramDict.Add("writeCFile", writer.ToString());

            writer = new StringWriter();

            #region ISR
            writer.WriteLine("/*-----------------------------------------------------------------------------");
            writer.WriteLine(" * FUNCTION NAME:   void " + m_instanceName + "_ISR( void )");
            writer.WriteLine(" *-----------------------------------------------------------------------------");
            writer.WriteLine(" * Summary:");
            writer.WriteLine(" *  This ISR is executed when a terminal count occurs. Global interrupt must be ");
            writer.WriteLine(" *  enable to invoke this ISR. This interrupt trig every second. ");
            writer.WriteLine(" * ");
            writer.WriteLine(" * Parameters:  ");
            writer.WriteLine(" *  void:  ");
            writer.WriteLine(" *");
            writer.WriteLine(" * Return: ");
            writer.WriteLine(" *  (void)");
            writer.WriteLine(" *");
            writer.WriteLine(" * Theory:");
            writer.WriteLine(" *  See summary");
            writer.WriteLine(" *");
            writer.WriteLine(" * Side Effects:");
            writer.WriteLine(" *  None");
            writer.WriteLine(" *");
            writer.WriteLine(" *---------------------------------------------------------------------------*/");
            writer.WriteLine("CY_ISR(" + m_instanceName + "_ISR)");
            writer.WriteLine("{");
            writer.WriteLine("    /* Clear OPPS interrupt status flag */");
            writer.WriteLine("    if (0 == " + m_instanceName + "_OPPS_INT_SR)");
            writer.WriteLine("    {");
            writer.WriteLine("        " + m_instanceName + "_CurTimeDate.Sec = " + m_instanceName + "_CurTimeDate.Sec + 1 - 1;   ");
            writer.WriteLine("    }");
            writer.WriteLine("    ");
            writer.WriteLine("    " + m_instanceName + "_CurTimeDate.Sec++;");
            writer.WriteLine("    ");
            writer.WriteLine("    	if(" + m_instanceName + "_CurTimeDate.Sec > " + m_instanceName + "_MINUTE_ELAPSED)");
            writer.WriteLine("	{");
            writer.WriteLine("		/* Inc Min */");
            writer.WriteLine("		" + m_instanceName + "_CurTimeDate.Min++;");
            writer.WriteLine("		" + m_instanceName + "_CurTimeDate.Sec = 0;");
            writer.WriteLine("        ");
            writer.WriteLine("		if (" + m_instanceName + "_CurTimeDate.Min > " + m_instanceName + "_HOUR_ELAPSED)");
            writer.WriteLine("		{");
            writer.WriteLine("			/* Inc HOUR */");
            writer.WriteLine("			" + m_instanceName + "_CurTimeDate.Hour++; ");
            writer.WriteLine("			" + m_instanceName + "_CurTimeDate.Min = 0;			");
            writer.WriteLine("      ");
            writer.WriteLine("			if(" + m_instanceName + "_CurTimeDate.Hour > " + m_instanceName + "_DAY_ELAPSED)");
            writer.WriteLine("			{");
            writer.WriteLine("				/* Inc DayOfMonth */");
            writer.WriteLine("				" + m_instanceName + "_CurTimeDate.DayOfMonth++; ");
            writer.WriteLine("				" + m_instanceName + "_CurTimeDate.Hour = 0;");
            writer.WriteLine("				/* Inc DayOfYear */");
            writer.WriteLine("				" + m_instanceName + "_CurTimeDate.DayOfYear++;");
            writer.WriteLine("				/* Calculate DayOfWeek */");
            writer.WriteLine("				" + m_instanceName + "_CurTimeDate.DayOfWeek++;");
            writer.WriteLine("                if (" + m_instanceName + "_CurTimeDate.DayOfWeek > " + m_instanceName + "_WEEK_ELAPSED)");
            writer.WriteLine("				{");
            writer.WriteLine("                    " + m_instanceName + "_CurTimeDate.DayOfWeek = 1;");
            writer.WriteLine("				}");
            writer.WriteLine("        				           ");
            writer.WriteLine("				if( (((" + m_instanceName + "_Status & " + m_instanceName + "_STATUS_LY) && (" + m_instanceName + "_CurTimeDate.Month == " + m_instanceName + "_FEBRUARY))");
            writer.WriteLine("				&& (" + m_instanceName + "_CurTimeDate.DayOfMonth > " + m_instanceName + "_Dim[" + m_instanceName + "_CurTimeDate.Month-1] + 1)) ||");
            writer.WriteLine("                (((" + m_instanceName + "_Status & " + m_instanceName + "_STATUS_LY) && (!(" + m_instanceName + "_CurTimeDate.Month == " + m_instanceName + "_FEBRUARY)))");
            writer.WriteLine("				&& (" + m_instanceName + "_CurTimeDate.DayOfMonth > " + m_instanceName + "_Dim[" + m_instanceName + "_CurTimeDate.Month-1])) ||                ");
            writer.WriteLine("				((!(" + m_instanceName + "_Status & " + m_instanceName + "_STATUS_LY)) && (" + m_instanceName + "_CurTimeDate.DayOfMonth > " + m_instanceName + "_Dim[" + m_instanceName + "_CurTimeDate.Month-1])) )");
            writer.WriteLine("				{				");
            writer.WriteLine("					/* Inc Month */");
            writer.WriteLine("					" + m_instanceName + "_CurTimeDate.Month++;");
            writer.WriteLine("					" + m_instanceName + "_CurTimeDate.DayOfMonth = 1;							");
            writer.WriteLine("					");
            writer.WriteLine("					if(" + m_instanceName + "_CurTimeDate.Month > " + m_instanceName + "_YEAR_ELAPSED)");
            writer.WriteLine("					{");
            writer.WriteLine("						/* Inc Year */");
            writer.WriteLine("						" + m_instanceName + "_CurTimeDate.Year++;");
            writer.WriteLine("						" + m_instanceName + "_CurTimeDate.Month = 1;");
            writer.WriteLine("						" + m_instanceName + "_CurTimeDate.DayOfYear = 1; ");
            writer.WriteLine("						");
            writer.WriteLine("						if(" + m_instanceName + "_IsLeapYear(" + m_instanceName + "_CurTimeDate.Year))  ");
            writer.WriteLine("						{ ");
            writer.WriteLine("							/* LP - true, else - false */");
            writer.WriteLine("							" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_LY;");
            writer.WriteLine("						}");
            writer.WriteLine("						else");
            writer.WriteLine("						{");
            writer.WriteLine("							" + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_LY;");
            writer.WriteLine("						}");
            writer.WriteLine("		");
            writer.WriteLine("						/* Alarm YEAR */");
            writer.WriteLine("						if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_YEAR_MASK)");
            writer.WriteLine("						{");
            writer.WriteLine("							if(" + m_instanceName + "_AlarmTimeDate.Year == " + m_instanceName + "_CurTimeDate.Year)");
            writer.WriteLine("							{");
            writer.WriteLine("								" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_YEAR_MASK;");
            writer.WriteLine("							}");
            writer.WriteLine("							else");
            writer.WriteLine("							{");
            writer.WriteLine("								" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_YEAR_MASK;");
            writer.WriteLine("							}");
            writer.WriteLine("						}");
            writer.WriteLine("						");
            writer.WriteLine("                        /* Set Alarm flag event */");
            writer.WriteLine("	                      if ((" + m_instanceName + "_AlarmMask == " + "(" + m_instanceName + "_AlarmMask & " + m_instanceName + "_AlarmStatus)) && " + m_instanceName + "_AlarmMask )");
            writer.WriteLine("                        {");
            writer.WriteLine("                            " + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AA;");
            writer.WriteLine("                            " + m_instanceName + "_AlarmStatus = 0;");
            writer.WriteLine("                        } ");
            writer.WriteLine("                        ");
            writer.WriteLine("						/* Every Year*/");
            writer.WriteLine("						if (" + m_instanceName + "_IntervalMask & " + m_instanceName + "_INTERVAL_YEAR_MASK)");
            writer.WriteLine("						{ ");
            writer.WriteLine("                            " + m_instanceName + "_EveryYear_ISR();");
            writer.WriteLine("						}");
            writer.WriteLine("						");
            if (iDstEnable > 0)
            {
                writer.WriteLine("						if (" + m_instanceName + "_DstMode & " + m_instanceName + "_DST_RELDATE)");
                writer.WriteLine("						{");
                writer.WriteLine("							" + m_instanceName + "_DSTDateConversion();");
                writer.WriteLine("						}");
            }
            writer.WriteLine("												");
            writer.WriteLine("					} /* Month > 12 */");
            writer.WriteLine("						");
            writer.WriteLine("					/* Alarm MONTH */");
            writer.WriteLine("					if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_MONTH_MASK )");
            writer.WriteLine("					{");
            writer.WriteLine("						if(" + m_instanceName + "_AlarmTimeDate.Month == " + m_instanceName + "_CurTimeDate.Month)");
            writer.WriteLine("						{");
            writer.WriteLine("							" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_MONTH_MASK;");
            writer.WriteLine("						}");
            writer.WriteLine("						else");
            writer.WriteLine("						{");
            writer.WriteLine("							" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_MONTH_MASK;");
            writer.WriteLine("						}");
            writer.WriteLine("					} ");
            writer.WriteLine("					");
            if (iDstEnable > 0)
            {
                writer.WriteLine("					if(" + m_instanceName + "_DstStopTimeDate.Month == " + m_instanceName + "_CurTimeDate.Month)");
                writer.WriteLine("					{");
                writer.WriteLine("						" + m_instanceName + "_DstStatusStop |= " + m_instanceName + "_DST_MONTH;");
                writer.WriteLine("					}");
                writer.WriteLine("					else");
                writer.WriteLine("					{");
                writer.WriteLine("						" + m_instanceName + "_DstStatusStop &= ~" + m_instanceName + "_DST_MONTH;");
                writer.WriteLine("					}");
                writer.WriteLine("					");
                writer.WriteLine("					if(" + m_instanceName + "_DstStartTimeDate.Month == " + m_instanceName + "_CurTimeDate.Month)");
                writer.WriteLine("					{");
                writer.WriteLine("						" + m_instanceName + "_DstStatusStart |= " + m_instanceName + "_DST_MONTH;");
                writer.WriteLine("					}");
                writer.WriteLine("					else");
                writer.WriteLine("					{");
                writer.WriteLine("						" + m_instanceName + "_DstStatusStart &= ~" + m_instanceName + "_DST_MONTH;");
                writer.WriteLine("					}	");
                writer.WriteLine("					");
            }
            writer.WriteLine("					");
            writer.WriteLine("                    /* Set Alarm flag event */");
            writer.WriteLine("	                  if ((" + m_instanceName + "_AlarmMask == " + "(" + m_instanceName + "_AlarmMask & " + m_instanceName + "_AlarmStatus)) && " + m_instanceName + "_AlarmMask )");
            writer.WriteLine("                    {");
            writer.WriteLine("                        " + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AA;");
            writer.WriteLine("                        " + m_instanceName + "_AlarmStatus = 0;");
            writer.WriteLine("                    } ");
            writer.WriteLine("                    ");
            writer.WriteLine("					/* Every Month */");
            writer.WriteLine("					if (" + m_instanceName + "_IntervalMask & " + m_instanceName + "_INTERVAL_MONTH_MASK)");
            writer.WriteLine("					{ ");
            writer.WriteLine("                        " + m_instanceName + "_EveryMonth_ISR();");
            writer.WriteLine("					}");
            writer.WriteLine("            		");
            writer.WriteLine("				}	/* DayOfMonth > 28,29,30,31 = Month */");
            writer.WriteLine("				");
            writer.WriteLine("				/* Alarm DAYOFWEEK */");
            writer.WriteLine("				if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_DAYOFWEEK_MASK)");
            writer.WriteLine("				{");
            writer.WriteLine("					if(" + m_instanceName + "_AlarmTimeDate.DayOfWeek == " + m_instanceName + "_CurTimeDate.DayOfWeek)");
            writer.WriteLine("					{");
            writer.WriteLine("          				" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFWEEK_MASK;");
            writer.WriteLine("					}");
            writer.WriteLine("					else");
            writer.WriteLine("					{");
            writer.WriteLine("          				" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFWEEK_MASK;");
            writer.WriteLine("					}");
            writer.WriteLine("				}");
            writer.WriteLine("          ");
            writer.WriteLine("				/* Alarm DAYOFYEAR */");
            writer.WriteLine("				if( " + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_DAYOFYEAR_MASK )");
            writer.WriteLine("				{										");
            writer.WriteLine("					if(" + m_instanceName + "_AlarmTimeDate.DayOfYear == " + m_instanceName + "_CurTimeDate.DayOfYear)");
            writer.WriteLine("					{");
            writer.WriteLine("						" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFYEAR_MASK;  ");
            writer.WriteLine("					}");
            writer.WriteLine("					else");
            writer.WriteLine("					{");
            writer.WriteLine("          				" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFYEAR_MASK;");
            writer.WriteLine("					}");
            writer.WriteLine("				}");
            writer.WriteLine("				");
            writer.WriteLine("				/* Alarm DAYOFMONTH */");
            writer.WriteLine("				if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_DAYOFMONTH_MASK )  ");
            writer.WriteLine("				{");
            writer.WriteLine("					if (" + m_instanceName + "_AlarmTimeDate.DayOfMonth == " + m_instanceName + "_CurTimeDate.DayOfMonth)");
            writer.WriteLine("					{ ");
            writer.WriteLine("          				" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFMONTH_MASK;");
            writer.WriteLine("					}");
            writer.WriteLine("       				else");
            writer.WriteLine("					{");
            writer.WriteLine("          				" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFMONTH_MASK;");
            writer.WriteLine("					}");
            writer.WriteLine("				}");
            writer.WriteLine("								");
            if (iDstEnable > 0)
            {
                writer.WriteLine("				if (" + m_instanceName + "_DstStopTimeDate.DayOfMonth == " + m_instanceName + "_CurTimeDate.DayOfMonth)");
                writer.WriteLine("				{ ");
                writer.WriteLine("          			" + m_instanceName + "_DstStatusStop |= " + m_instanceName + "_DST_DAYOFMONTH;");
                writer.WriteLine("				}");
                writer.WriteLine("       			else");
                writer.WriteLine("				{");
                writer.WriteLine("          			" + m_instanceName + "_DstStatusStop &= ~" + m_instanceName + "_DST_DAYOFMONTH;");
                writer.WriteLine("				}");
                writer.WriteLine("			");
                writer.WriteLine("				if (" + m_instanceName + "_DstStartTimeDate.DayOfMonth == " + m_instanceName + "_CurTimeDate.DayOfMonth)");
                writer.WriteLine("				{ ");
                writer.WriteLine("          			" + m_instanceName + "_DstStatusStart |= " + m_instanceName + "_DST_DAYOFMONTH;");
                writer.WriteLine("				}");
                writer.WriteLine("       			else");
                writer.WriteLine("				{");
                writer.WriteLine("          			" + m_instanceName + "_DstStatusStart &= ~" + m_instanceName + "_DST_DAYOFMONTH;");
                writer.WriteLine("				}");
            }
            writer.WriteLine("				");
            writer.WriteLine("                /* Set Alarm flag event */");
            writer.WriteLine("	              if ((" + m_instanceName + "_AlarmMask == " + "(" + m_instanceName + "_AlarmMask & " + m_instanceName + "_AlarmStatus)) && " + m_instanceName + "_AlarmMask )");
            writer.WriteLine("                {");
            writer.WriteLine("                    " + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AA;");
            writer.WriteLine("                    " + m_instanceName + "_AlarmStatus = 0;");
            writer.WriteLine("                } ");
            writer.WriteLine("                ");
            writer.WriteLine("				/* Every Day */");
            writer.WriteLine("				if (" + m_instanceName + "_IntervalMask & " + m_instanceName + "_INTERVAL_DAY_MASK)");
            writer.WriteLine("				{ ");
            writer.WriteLine("                    " + m_instanceName + "_EveryDayOfMonth_ISR();");
            writer.WriteLine("				}");
            writer.WriteLine("				 ");
            writer.WriteLine("                if (" + m_instanceName + "_CurTimeDate.DayOfWeek == 1)");
            writer.WriteLine("				{");
            writer.WriteLine("				    /* Every Week */");
            writer.WriteLine("                    if (" + m_instanceName + "_IntervalMask & " + m_instanceName + "_INTERVAL_WEEK_MASK)");
            writer.WriteLine("                    {     ");
            writer.WriteLine("                       " + m_instanceName + "_EveryWeek_ISR();");
            writer.WriteLine("				    }");
            writer.WriteLine("				}			");
            writer.WriteLine("			");
            writer.WriteLine("			} /* Hour > 23 = Day */");
            writer.WriteLine("									    ");
            writer.WriteLine("			/* Status set PM/AM flag */");
            writer.WriteLine("			if (" + m_instanceName + "_CurTimeDate.Hour < " + m_instanceName + "_HALF_OF_DAY_ELAPSED)");
            writer.WriteLine("			{");
            writer.WriteLine("				/* AM Hour 00:00-11:59, flag zero */");
            writer.WriteLine("				" + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_AM_PM;");
            writer.WriteLine("			}");
            writer.WriteLine("			else");
            writer.WriteLine("			{");
            writer.WriteLine("				/* PM Hour 12:00-23:59, flag set */");
            writer.WriteLine("				" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AM_PM;");
            writer.WriteLine("			}");
            writer.WriteLine("			");
            if (iDstEnable > 0)
            {
                writer.WriteLine("			if (" + m_instanceName + "_DstStopTimeDate.Hour == " + m_instanceName + "_CurTimeDate.Hour)");
                writer.WriteLine("			{");
                writer.WriteLine("				" + m_instanceName + "_DstStatusStop |= " + m_instanceName + "_DST_HOUR;");
                writer.WriteLine("			}");
                writer.WriteLine("            else");
                writer.WriteLine("            {");
                writer.WriteLine("                " + m_instanceName + "_DstStatusStop &= ~" + m_instanceName + "_DST_HOUR;");
                writer.WriteLine("            }");
                writer.WriteLine("		");
                writer.WriteLine("			if (" + m_instanceName + "_DstStartTimeDate.Hour == " + m_instanceName + "_CurTimeDate.Hour)");
                writer.WriteLine("			{");
                writer.WriteLine("				" + m_instanceName + "_DstStatusStart |= " + m_instanceName + "_DST_HOUR;");
                writer.WriteLine("			}");
                writer.WriteLine("            else");
                writer.WriteLine("            {");
                writer.WriteLine("               " + m_instanceName + "_DstStatusStart &= ~" + m_instanceName + "_DST_HOUR;");
                writer.WriteLine("			}");
                writer.WriteLine("            			");
                writer.WriteLine("			/* DST Enable ? */");
                writer.WriteLine("			if (" + m_instanceName + "_DstMode & " + m_instanceName + "_DST_ENABLE)");
                writer.WriteLine("			{");
                writer.WriteLine("				if(" + m_instanceName + "_Status & " + m_instanceName + "_STATUS_DST)");
                writer.WriteLine("				{");
                writer.WriteLine("					if ((" + m_instanceName + "_DstStatusStop & " + m_instanceName + "_DST_HOUR) && (" + m_instanceName + "_DstStatusStop & " + m_instanceName + "_DST_DAYOFMONTH) && (" + m_instanceName + "_DstStatusStop & " + m_instanceName + "_DST_MONTH))");
                writer.WriteLine("					{		");
                writer.WriteLine("						/* Dec Hour and Min */");
                writer.WriteLine("						" + m_instanceName + "_CurTimeDate.Min -= " + m_instanceName + "_DstOffset % (" + m_instanceName + "_HOUR_ELAPSED + 1);");
                writer.WriteLine("						if (" + m_instanceName + "_CurTimeDate.Min > " + m_instanceName + "_HOUR_ELAPSED)");
                writer.WriteLine("						{");
                writer.WriteLine("							/* Adjust Min */");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.Min = " + m_instanceName + "_HOUR_ELAPSED - (~" + m_instanceName + "_CurTimeDate.Min);");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.Hour--;");
                writer.WriteLine("						}");
                writer.WriteLine("					");
                writer.WriteLine("						" + m_instanceName + "_CurTimeDate.Hour -= " + m_instanceName + "_DstOffset / (" + m_instanceName + "_HOUR_ELAPSED + 1);");
                writer.WriteLine("						if (" + m_instanceName + "_CurTimeDate.Hour > " + m_instanceName + "_DAY_ELAPSED)");
                writer.WriteLine("						{");
                writer.WriteLine("							/* Adjust Hour, DEC DOM */");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.Hour = " + m_instanceName + "_DAY_ELAPSED - (~" + m_instanceName + "_CurTimeDate.Hour);");
                writer.WriteLine("                            ");
                writer.WriteLine("                            /* Status set PM/AM flag */");
                writer.WriteLine("                            if (" + m_instanceName + "_CurTimeDate.Hour < " + m_instanceName + "_HALF_OF_DAY_ELAPSED)");
                writer.WriteLine("                            {");
                writer.WriteLine("                                /* AM Hour 00:00-11:59, flag zero */");
                writer.WriteLine("                                " + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_AM_PM;");
                writer.WriteLine("                            }");
                writer.WriteLine("                            else");
                writer.WriteLine("                            {");
                writer.WriteLine("                                /* PM Hour 12:00-23:59, flag set */");
                writer.WriteLine("                                " + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AM_PM;");
                writer.WriteLine("                            }");
                writer.WriteLine("                            ");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.DayOfMonth--;");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.DayOfYear--;	");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.DayOfWeek--;");
                writer.WriteLine("                            ");
                writer.WriteLine("                            if(" + m_instanceName + "_CurTimeDate.DayOfWeek == 0)");
                writer.WriteLine("                            {");
                writer.WriteLine("                                " + m_instanceName + "_CurTimeDate.DayOfWeek = " + m_instanceName + "_DAYS_IN_WEEK;                                ");
                writer.WriteLine("                            }");
                writer.WriteLine("                            ");
                writer.WriteLine("							if (" + m_instanceName + "_CurTimeDate.DayOfMonth == 0)");
                writer.WriteLine("							{");
                writer.WriteLine("								" + m_instanceName + "_CurTimeDate.Month--;");
                writer.WriteLine("								if(" + m_instanceName + "_CurTimeDate.Month == 0)");
                writer.WriteLine("								{");
                writer.WriteLine("									" + m_instanceName + "_CurTimeDate.Month = " + m_instanceName + "_DECEMBER;");
                writer.WriteLine("									" + m_instanceName + "_CurTimeDate.DayOfMonth = " + m_instanceName + "_Dim[" + m_instanceName + "_CurTimeDate.Month-1];");
                writer.WriteLine("									" + m_instanceName + "_CurTimeDate.Year--;");
                writer.WriteLine("									if(" + m_instanceName + "_IsLeapYear(" + m_instanceName + "_CurTimeDate.Year))  ");
                writer.WriteLine("									{ ");
                writer.WriteLine("										/* LP - true, else - false */");
                writer.WriteLine("										" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_LY;");
                writer.WriteLine("										" + m_instanceName + "_CurTimeDate.DayOfYear = 356;");
                writer.WriteLine("									}");
                writer.WriteLine("									else");
                writer.WriteLine("									{");
                writer.WriteLine("							            " + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_LY;");                
                writer.WriteLine("										" + m_instanceName + "_CurTimeDate.DayOfYear = 355;");
                writer.WriteLine("									}");
                writer.WriteLine("                                    " + m_instanceName + "_EveryYear_ISR();		");
                writer.WriteLine("								}");
                writer.WriteLine("								else");
                writer.WriteLine("								{");
                writer.WriteLine("									" + m_instanceName + "_CurTimeDate.DayOfMonth = " + m_instanceName + "_Dim[" + m_instanceName + "_CurTimeDate.Month-1];");
                writer.WriteLine("								}");
                writer.WriteLine("                                " + m_instanceName + "_EveryMonth_ISR();");
                writer.WriteLine("							}");
                writer.WriteLine("                            " + m_instanceName + "_EveryDayOfMonth_ISR();");
                writer.WriteLine("						}");
                writer.WriteLine("						" + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_DST;");
                writer.WriteLine("						" + m_instanceName + "_DstStatusStop = 0;			");
                writer.WriteLine("					}");
                writer.WriteLine("				}");
                writer.WriteLine("				else");
                writer.WriteLine("				{");
                writer.WriteLine("					if ((" + m_instanceName + "_DstStatusStart & " + m_instanceName + "_DST_HOUR) && (" + m_instanceName + "_DstStatusStart & " + m_instanceName + "_DST_DAYOFMONTH) && (" + m_instanceName + "_DstStatusStart & " + m_instanceName + "_DST_MONTH))");
                writer.WriteLine("					{");
                writer.WriteLine("						/* Add Hour and Min */");
                writer.WriteLine("						" + m_instanceName + "_CurTimeDate.Min += " + m_instanceName + "_DstOffset % (" + m_instanceName + "_HOUR_ELAPSED + 1);");
                writer.WriteLine("						if (" + m_instanceName + "_CurTimeDate.Min > " + m_instanceName + "_HOUR_ELAPSED)");
                writer.WriteLine("						{");
                writer.WriteLine("							/* Adjust Min */");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.Min -= (" + m_instanceName + "_HOUR_ELAPSED + 1);");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.Hour++;");
                writer.WriteLine("						}");
                writer.WriteLine("					");
                writer.WriteLine("						" + m_instanceName + "_CurTimeDate.Hour += " + m_instanceName + "_DstOffset / (" + m_instanceName + "_HOUR_ELAPSED + 1);");
                writer.WriteLine("						if (" + m_instanceName + "_CurTimeDate.Hour > " + m_instanceName + "_DAY_ELAPSED)");
                writer.WriteLine("						{");
                writer.WriteLine("							/* Adjust hour, add day */");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.Hour -= (" + m_instanceName + "_DAY_ELAPSED + 1);");
                writer.WriteLine("                            ");
                writer.WriteLine("                            /* Status set PM/AM flag */");
                writer.WriteLine("                            if (" + m_instanceName + "_CurTimeDate.Hour < " + m_instanceName + "_HALF_OF_DAY_ELAPSED)");
                writer.WriteLine("                            {");
                writer.WriteLine("                                /* AM Hour 00:00-11:59, flag zero */");
                writer.WriteLine("                                " + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_AM_PM;");
                writer.WriteLine("                            }");
                writer.WriteLine("                            else");
                writer.WriteLine("                            {");
                writer.WriteLine("                                /* PM Hour 12:00-23:59, flag set */");
                writer.WriteLine("                                " + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AM_PM;");
                writer.WriteLine("                            }");
                writer.WriteLine("                            ");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.DayOfMonth++;");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.DayOfYear++;");
                writer.WriteLine("							" + m_instanceName + "_CurTimeDate.DayOfWeek++;");
                writer.WriteLine("                            ");
                writer.WriteLine("                            if(" + m_instanceName + "_CurTimeDate.DayOfWeek > " + m_instanceName + "_WEEK_ELAPSED)");
                writer.WriteLine("                            {");
                writer.WriteLine("                                " + m_instanceName + "_CurTimeDate.DayOfWeek = 1;                                ");
                writer.WriteLine("                            }");
                writer.WriteLine("                            ");
                writer.WriteLine("							if (" + m_instanceName + "_CurTimeDate.DayOfMonth > " + m_instanceName + "_Dim[" + m_instanceName + "_CurTimeDate.Month-1])");
                writer.WriteLine("							{");
                writer.WriteLine("								" + m_instanceName + "_CurTimeDate.Month++;");
                writer.WriteLine("								" + m_instanceName + "_CurTimeDate.DayOfMonth = 1;");
                writer.WriteLine("								if(" + m_instanceName + "_CurTimeDate.Month > " + m_instanceName + "_YEAR_ELAPSED)");
                writer.WriteLine("								{");
                writer.WriteLine("									" + m_instanceName + "_CurTimeDate.Month = " + m_instanceName + "_JANUARY;");
                writer.WriteLine("									" + m_instanceName + "_CurTimeDate.Year++;");
                writer.WriteLine("									if(" + m_instanceName + "_IsLeapYear(" + m_instanceName + "_CurTimeDate.Year))  ");
                writer.WriteLine("									{ ");
                writer.WriteLine("										/* LP - true, else - false */");
                writer.WriteLine("										" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_LY;");
                writer.WriteLine("									}");
                writer.WriteLine("									else" );
                writer.WriteLine("									{ ");
                writer.WriteLine("							            " + m_instanceName + "_Status &= ~" + m_instanceName + "_STATUS_LY;");
                writer.WriteLine("									}");                                
                writer.WriteLine("									" + m_instanceName + "_CurTimeDate.DayOfYear = 1;");
                writer.WriteLine("                                    ");
                writer.WriteLine("                                    " + m_instanceName + "_EveryYear_ISR();");
                writer.WriteLine("								}");
                writer.WriteLine("		                        " + m_instanceName + "_EveryMonth_ISR();");
                writer.WriteLine("							}");
                writer.WriteLine("		                    " + m_instanceName + "_EveryDayOfMonth_ISR();");
                writer.WriteLine("						}");
                writer.WriteLine("						" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_DST;");
                writer.WriteLine("						" + m_instanceName + "_DstStatusStart = 0;");
                writer.WriteLine("                        ");
                writer.WriteLine("                        /* Month */");
                writer.WriteLine("                        if(" + m_instanceName + "_DstStopTimeDate.Month == " + m_instanceName + "_CurTimeDate.Month)");
                writer.WriteLine("                        {");
                writer.WriteLine("                            " + m_instanceName + "_DstStatusStop |= " + m_instanceName + "_DST_MONTH;");
                writer.WriteLine("                        }");
                writer.WriteLine("                        else");
                writer.WriteLine("                        {");
                writer.WriteLine("                            " + m_instanceName + "_DstStatusStop &= ~" + m_instanceName + "_DST_MONTH;");
                writer.WriteLine("                        }");
                writer.WriteLine("                        ");
                writer.WriteLine("                        /*DayOfMonth*/");
                writer.WriteLine("                        if (" + m_instanceName + "_DstStopTimeDate.DayOfMonth == " + m_instanceName + "_CurTimeDate.DayOfMonth)");
                writer.WriteLine("                        { ");
                writer.WriteLine("                            " + m_instanceName + "_DstStatusStop |= " + m_instanceName + "_DST_DAYOFMONTH;");
                writer.WriteLine("                        }");
                writer.WriteLine("                        else");
                writer.WriteLine("                        {");
                writer.WriteLine("                            " + m_instanceName + "_DstStatusStop &= ~" + m_instanceName + "_DST_DAYOFMONTH;");
                writer.WriteLine("                        }");
                writer.WriteLine("					}");
                writer.WriteLine("				}");
                writer.WriteLine("                                			");
                writer.WriteLine("				/* Alarm DAYOFWEEK */");
                writer.WriteLine("				if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_DAYOFWEEK_MASK)");
                writer.WriteLine("				{");
                writer.WriteLine("					if(" + m_instanceName + "_AlarmTimeDate.DayOfWeek == " + m_instanceName + "_CurTimeDate.DayOfWeek)");
                writer.WriteLine("					{");
                writer.WriteLine("          				" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFWEEK_MASK;");
                writer.WriteLine("					}");
                writer.WriteLine("					else");
                writer.WriteLine("					{");
                writer.WriteLine("          				" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFWEEK_MASK;");
                writer.WriteLine("					}");
                writer.WriteLine("				}");
                writer.WriteLine("");
                writer.WriteLine("				/* Alarm DAYOFYEAR */");
                writer.WriteLine("				if( " + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_DAYOFYEAR_MASK )");
                writer.WriteLine("				{										");
                writer.WriteLine("					if(" + m_instanceName + "_AlarmTimeDate.DayOfYear == " + m_instanceName + "_CurTimeDate.DayOfYear)");
                writer.WriteLine("					{");
                writer.WriteLine("						" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFYEAR_MASK;  ");
                writer.WriteLine("					}");
                writer.WriteLine("					else");
                writer.WriteLine("					{");
                writer.WriteLine("          				" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFYEAR_MASK;");
                writer.WriteLine("					}");
                writer.WriteLine("				}");
                writer.WriteLine("				");
                writer.WriteLine("				/* Alarm DAYOFMONTH */");
                writer.WriteLine("				if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_DAYOFMONTH_MASK )  ");
                writer.WriteLine("				{");
                writer.WriteLine("					if (" + m_instanceName + "_AlarmTimeDate.DayOfMonth == " + m_instanceName + "_CurTimeDate.DayOfMonth)");
                writer.WriteLine("					{ ");
                writer.WriteLine("          				" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_DAYOFMONTH_MASK;");
                writer.WriteLine("					}");
                writer.WriteLine("       				else");
                writer.WriteLine("					{");
                writer.WriteLine("          				" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_DAYOFMONTH_MASK;");
                writer.WriteLine("					}");
                writer.WriteLine("				}");
                writer.WriteLine("");
                writer.WriteLine("				/* Alarm MONTH */");
                writer.WriteLine("				if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_MONTH_MASK )");
                writer.WriteLine("				{");
                writer.WriteLine("					if(" + m_instanceName + "_AlarmTimeDate.Month == " + m_instanceName + "_CurTimeDate.Month)");
                writer.WriteLine("					{");
                writer.WriteLine("						" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_MONTH_MASK;");
                writer.WriteLine("					}");
                writer.WriteLine("					else");
                writer.WriteLine("					{");
                writer.WriteLine("						" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_MONTH_MASK;");
                writer.WriteLine("					}");
                writer.WriteLine("				} ");
                writer.WriteLine("");
                writer.WriteLine("				/* Alarm YEAR */");
                writer.WriteLine("				if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_YEAR_MASK)");
                writer.WriteLine("				{");
                writer.WriteLine("					if(" + m_instanceName + "_AlarmTimeDate.Year == " + m_instanceName + "_CurTimeDate.Year)");
                writer.WriteLine("					{");
                writer.WriteLine("						" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_YEAR_MASK;");
                writer.WriteLine("					}");
                writer.WriteLine("					else");
                writer.WriteLine("					{");
                writer.WriteLine("						" + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_YEAR_MASK;");
                writer.WriteLine("					}");
                writer.WriteLine("				}");
                writer.WriteLine("                ");
                writer.WriteLine("                /* Set Alarm flag event */");
                writer.WriteLine("	              if ((" + m_instanceName + "_AlarmMask == " + "(" + m_instanceName + "_AlarmMask & " + m_instanceName + "_AlarmStatus)) && " + m_instanceName + "_AlarmMask )");
                writer.WriteLine("                {");
                writer.WriteLine("                    " + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AA;");
                writer.WriteLine("                    " + m_instanceName + "_AlarmStatus = 0;");
                writer.WriteLine("                } ");
                writer.WriteLine("            }");
            }
            writer.WriteLine("			");
            writer.WriteLine("			/* Alarm HOUR */");
            writer.WriteLine("			if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_HOUR_MASK)");
            writer.WriteLine("			{");
            writer.WriteLine("				if (" + m_instanceName + "_AlarmTimeDate.Hour == " + m_instanceName + "_CurTimeDate.Hour)");
            writer.WriteLine("				{");
            writer.WriteLine("					" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_HOUR_MASK;");
            writer.WriteLine("				}");
            writer.WriteLine("                else");
            writer.WriteLine("                {");
            writer.WriteLine("                    " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_HOUR_MASK;");
            writer.WriteLine("                }");
            writer.WriteLine("			}");
            writer.WriteLine("			");
            writer.WriteLine("            /* Set Alarm flag event */");
            writer.WriteLine("	          if ((" + m_instanceName + "_AlarmMask == " + "(" + m_instanceName + "_AlarmMask & " + m_instanceName + "_AlarmStatus)) && " + m_instanceName + "_AlarmMask )");
            writer.WriteLine("            {");
            writer.WriteLine("                " + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AA;");
            writer.WriteLine("                " + m_instanceName + "_AlarmStatus = 0;");
            writer.WriteLine("            } ");
            writer.WriteLine("			/* Every Hour */");
            writer.WriteLine("			if (" + m_instanceName + "_IntervalMask & " + m_instanceName + "_INTERVAL_HOUR_MASK)");
            writer.WriteLine("			{ ");
            writer.WriteLine("                " + m_instanceName + "_EveryHour_ISR();");
            writer.WriteLine("			}");
            writer.WriteLine("			");
            writer.WriteLine("		} /* Min > 59 = Hour */");
            writer.WriteLine("		");
            writer.WriteLine("    	/* Alarm MIN */");
            writer.WriteLine("		if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_MIN_MASK)");
            writer.WriteLine("		{");
            writer.WriteLine("			if (" + m_instanceName + "_AlarmTimeDate.Min == " + m_instanceName + "_CurTimeDate.Min)");
            writer.WriteLine("			{");
            writer.WriteLine("				" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_MIN_MASK;");
            writer.WriteLine("			}");
            writer.WriteLine("            else");
            writer.WriteLine("            {");
            writer.WriteLine("                " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_MIN_MASK;");
            writer.WriteLine("            }");
            writer.WriteLine("		}");
            writer.WriteLine("		");
            writer.WriteLine("        /* Set Alarm flag event */");
            writer.WriteLine("	      if ((" + m_instanceName + "_AlarmMask == " + "(" + m_instanceName + "_AlarmMask & " + m_instanceName + "_AlarmStatus)) && " + m_instanceName + "_AlarmMask )");
            writer.WriteLine("        {");
            writer.WriteLine("            " + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AA;");
            writer.WriteLine("            " + m_instanceName + "_AlarmStatus = 0;");
            writer.WriteLine("        } ");
            writer.WriteLine("		/* Every Min */");
            writer.WriteLine("		if (" + m_instanceName + "_IntervalMask & " + m_instanceName + "_INTERVAL_MIN_MASK)");
            writer.WriteLine("		{");
            writer.WriteLine("            " + m_instanceName + "_EveryMinute_ISR();");
            writer.WriteLine("		}");
            writer.WriteLine("	");
            writer.WriteLine("	} /* Sec */");
            writer.WriteLine("    ");
            writer.WriteLine("	/* Alarm SEC */");
            writer.WriteLine("	if (" + m_instanceName + "_AlarmMask & " + m_instanceName + "_ALARM_SEC_MASK)");
            writer.WriteLine("	{");
            writer.WriteLine("		if (" + m_instanceName + "_AlarmTimeDate.Sec == " + m_instanceName + "_CurTimeDate.Sec)");
            writer.WriteLine("		{");
            writer.WriteLine("			" + m_instanceName + "_AlarmStatus |= " + m_instanceName + "_ALARM_SEC_MASK;");
            writer.WriteLine("		}");
            writer.WriteLine("        else");
            writer.WriteLine("        {");
            writer.WriteLine("            " + m_instanceName + "_AlarmStatus &= ~" + m_instanceName + "_ALARM_SEC_MASK;   ");
            writer.WriteLine("        }	");
            writer.WriteLine("	} ");
            writer.WriteLine("	");
            writer.WriteLine("	/* Set Alarm flag event */");
            writer.WriteLine("	if ((" + m_instanceName + "_AlarmMask == " + "(" + m_instanceName + "_AlarmMask & " + m_instanceName + "_AlarmStatus)) && " + m_instanceName + "_AlarmMask )");
            writer.WriteLine("	{");
            writer.WriteLine(" 		" + m_instanceName + "_Status |= " + m_instanceName + "_STATUS_AA;");
            writer.WriteLine("		" + m_instanceName + "_AlarmStatus = 0;");
            writer.WriteLine("	} ");
            writer.WriteLine("    /* Every Sec */ ");
            writer.WriteLine("    if (" + m_instanceName + "_IntervalMask & " + m_instanceName + "_INTERVAL_SEC_MASK)");
            writer.WriteLine("	{");
            writer.WriteLine("        " + m_instanceName + "_EverySecond_ISR();");
            writer.WriteLine("	}");
            writer.WriteLine("	    ");
            writer.WriteLine("}");
            #endregion

            paramDict.Add("writeISR", writer.ToString());

        }
        #endregion
    }
}
